*-----------------------------------------------------------
* Title      :SMTP
* Written by :88M       
* Date       :27.11.2021
* Description:
*-----------------------------------------------------------
    ORG	    $0 
    
    DC.L $00FFFFF8      0 сйюгюрекэ ярейю
    DC.L START          1 ярюпрнбши юдпея опнцпюллш
    DC.L INT            2 ньхайю ьхмш
    DC.L INT            3 ньхайю юдпеяю
    DC.L ILLEGALINT     4 меопюбхкэмюъ хмярпсйжхъ
    DC.L DIVIDE0        5 декемхе мю мнкэ
    DC.L INT            6 CHK exception
    DC.L INT            7 TRAPV TRAP ON OVERFLOW
    DC.L INT            8 мюпсьемхе опюб
    DC.L INT            9 TRACE EXEPTION
    DC.L INT           10 LINE-A EMULATION
    DC.L INT           11 LINE-F EMULATION
    DC.L INT           12 REVERSED
    DC.L INT           13 REVERSED
    DC.L INT           14 FORMAT ERROR
    DC.L INT           15 мехяонкэгселши бейрнп опепшбюмхи
    DC.L INT           16 REVERSED
    DC.L INT           17 REVERSED
    DC.L INT           18 REVERSED
    DC.L INT           19 REVERSED
    DC.L INT           20 REVERSED 
    DC.L INT           21 REVERSED
    DC.L INT           22 REVERSED
    DC.L INT           23 REVERSED  
    DC.L INT           24 SPURIUS INT
    DC.L INT           25 1 LEVEL INT
    DC.L INT           26 2 LEVEL INT 
    DC.L INT           27 3 LEVEL INT
    DC.L VIDEOINTH     28 4 LEVEL INT цнпхгнмрюкэмне опепшбюмхе VDP
    DC.L INT           29 5 LEVEL INT 
    DC.L VIDEOINTV     30 6 LEVEL INT бепрхйюкэмне опепшбюмхе VDP
            
    ;*аЮКЮЯР ГЮАХРШИ ТСМЙЖХЪЛХ        
RTBLOGOTILEMAP
    INCBIN "tilemap\res\RTBLOGOTILEMAP.BIN"    
    
VBLANKEND *нфхдюмхе мювюкю бепрхйюкэмни яхмупнмхгюжхх
    MOVE.L D0,-(A7)
.L  MOVE.W VDPCONTROL,D0
    AND.W #%0000000000001000,D0
    BNE .L
    MOVE.L (A7)+,D0
    RTS
    
VBLANKSTART *нфхдюмхе йнмжю бепрхйюкэмни яхмупнмхгюжхх
    MOVE.L D0,-(A7)
.L
    MOVE.W VDPCONTROL,D0
    AND.W #%0000000000001000,D0
    BEQ .L  
    MOVE.L (A7)+,D0  
    RTS
    
HBLANKSTART
    MOVE.W VDPCONTROL,D0
    AND.W #%0000000000000100,D0
    BEQ HBLANKSTART
    RTS
    
DMAWAIT
    MOVE.W VDPCONTROL,D5
    AND.W #%0000000000000010,D5  
    BNE DMAWAIT
    move.w #$8F02,VDPCONTROL
    RTS
PREPVRAM *бшвхякемхе юдпеяю бхденоюлърх б D6 х оепемня ецн б сопюбкъчыхи онпр VDP
    MOVEM.L D0-D7/A0-A7,-(A7)
    MOVE.L D6,D0
    AND.W #%1100000000000000,D0
    ROL.W #2,D0
    
    AND.L #%0011111111111111,D6
    ROL.L #8,D6
    ROL.L #8,D6
    

    OR.L D0,D6
    OR.L #$40000000,D6
    
    MOVE.L D6,(VDPCONTROL)
    MOVEM.L (A7)+,D0-D7/A0-A7
    RTS
    
    DC.L '    '
    DC.B '  '
    
    
    
    
    
;*================================================================================================================    
    DC.B 'SEGA MEGA DRIVE ' ;рхо яхярелш
    DC.B 'CL RTB 2022.XXX '  ;йнохкетр
    DC.B 'SEGA MEGA TOUHOU PROJECT                        ' ;мюгбюмхе леярмне
    DC.B 'SEGA MEGA TOUHOU PROJECT                        ' ;мюгбюмхе гюпсаефмне
    DC.B 'GM 88888888-88' ;яепхимши мнлеп
    DC.B '00' ;йнмрпнкэмюъ ясллю
    DC.B '6               ' ;онддепфйю йнмрпнккепнб
    DC.L $000000    юдпея огс мювюкн
    DC.L $3FFFFF    йнмеж огс
    DC.L $FF0000    юдпея нгс мювюкн
    DC.L $FFFFFF    йнмеж нгс
    ORG $1B0
    DC.L ' ' дно оюлърэ
    ORG $1BC
    DC.L ' ' лндел
    ORG $1C8
    DC.L ' ' пегепб
    ORG $1F0
    DC.B 'E' пецхнм
*==================================================================
*                               Z80
*   Z80RAM equ $A00000 мювюкн оюлърх Z80
*йнмеж нгс $A0FFFF
*   Z80RES equ $A11200 яапня Z80 #$000 WORD
*==================================================================
*                               VDP
VDPCONTROL equ $C00004      сопюбкъчыхи онпр
VDPDATA    equ $C00000      онпр дкъ дюммшу
VDPHV      equ $C00008      янярнъмхе пюгб╗прйх
VRAM       equ $40000000    бхденоюлърэ
CRAM       equ $C0000000    оюкхрпноюлърэ 
VSRAM      equ $40000010    бепрхйюкэмши яйпнкк оюлърэ 4=гЮОХЯЭ/0=вРЕМХЕ 
TILEA      equ $40000003    рюиклюо ю
TILEB      equ $60000003    рюиклюо б
WINDOWTILE equ $70000003    рюиклюо нймю
*                           VRAM ADDRESS
VRAMTILES    equ $0000 *-BFFF юдпея рюикнб 
VRAMTILEMAPA equ $C000 *-D7FF рюиклюо ю
VRAMSPRITE   equ $D800 *-DFFF юрпхасрш яопюирнб
VRAMTILEMAPB equ $E000 *-EFFF рюиклюо б
VRAMWINDOW   equ $F000 *-FBFF рюиклюо нймю
VRAMHSCROLL  equ $DC00 * яйпнкк цнпхгнмрюкэмши
   
*==================================================================
*                        68K
RAM     equ $FF0000 
*йнмеж оюлърх $FFFFFF
*=================================================================                        
    
    ORG	    $0200        
    
START 
    
*    MOVE.L #VRAMTILES+15,D6
*    JSR PREPVRAMREAD  НРКЮДНВМЮЪ ТСМЙЖХЪ ДКЪ ПЕЛНМРЮ prevram
*CHECK:    
*   CMPI.W #$100, (Z80BUS) опнбепйю ьхмш
*    BNE.S CHECK


    
   * MOVE.W #$100,Z80BUS гюопюьхбюел ьхмс Z80
   * MOVE.W #$000,Z80RES сярюмюбкхбел яапня Z80




    
    
*мюярпюхбюел VDP
    MOVE.W #$8000,D2 йсянй дюммшу пецхярпнб 
    MOVEQ #24,D1 дкхммю VDPSETUP            
    LEA VDPSETUP,A0 гюцпсгйю юдпеяю VDPSETUP
    MOVE.W (VDPCONTROL),D0 вхрюел янярнъмхе VDP
    
LOOP0    
    MOVE.B (A0)+,D2 аеп╗л йсянй дюммшу он юдпеяс A0 х йкюд╗л б D2 юдпея сбекхвхбюел мю 1 аюир
    MOVE.W D2,(VDPCONTROL) аеп╗л D2 оепеяшкюел б сопюбкемхе VDP
    
    ADD.W #$0100,D2 днаюбкъел 100 врна онксвхрэ якедсчыхи пецхярп VDP
    DBRA D1,LOOP0 жхйкхляъ онйю б дкхмме D1 ме асдер 0
    
*------------------------------------------------------------------------------------------------------    
   


    
*===================================================================================       
    
*LOOP *йнд дкъ опнбепйх мюфюрхъ ймнонй дкъ бшгнбю мнплюкэмнцн лнмхрнпю
*    LEA LOOP,A6 янупюмхл юдпея бнгбпюрю   
*    JSR VBLANKSTART фД╦Л МЮВЮКЮ БЕПРХЙЮКЭМНИ ЯХМУПНМХГЮЖХХ    
*    JSR Player_ReadControlsDual явхршбюел дфниярхй
*    CMP.L #$FFFFFD7F,D0 япюбмхбюел йнлахмюжхч X+START    
*    BEQ MONITOR еякх янбоюдемхе оепеундхл б лнмхрнп    
*    JSR VBLANKEND ФД╦Л ЙНМЕЖ БЕПРХЙЮКЭМНИ ЯХМУПНМХГЮЖХХ
*    JMP LOOP 
*===================================================================================
    MOVE.W #$8F01,(VDPCONTROL) сярюмюбкхбюел юбрн якнфемхе б VDP мю 1, 16 ахрмне якнбн
    *JSR CLEARTILEMAPA
    *JSR CLEARTILES
    *JSR CLEARTILEMAPB
    JSR MEMINIT
    
    MOVE.W #$8F02,(VDPCONTROL) вхярхл оюлърэ мю бяъйхи яксвюи =)


    PEA sampbank
    PEA seqbank
    PEA envbank
    PEA patchbank


    PEA RTBLOGO

    JMP gemsinit


    *bra RTBLOGO *опнцпюллю кнцнрхою
    

    
    

*==========================================================================================


    
    
VDPSETUP
    DC.B $04 00  MODE REGISTER 1
    DC.B $5C 01  MODE REGISTER 2 $44 (5C)
    DC.B $30 02  SCROLL A $C000
	DC.B $3C 03  SCROLL WINDOW $F000
	DC.B $07 04  SCROLL B $E000
	DC.B $6C 05  SPRITE ATRIBUTE $D800
	DC.B $00 06  ме хяонкэгсеряъ										
	DC.B $00 07  BACKGROUND COLOR
	DC.B $00 08  ме хяонкэгсеряъ	
	DC.B $00 09  ме хяонкэгсеряъ	
	DC.B $F0 10  H INT
	DC.B $00 11  MODE REGISTER 3
	DC.B $81 12  MODE REGISTER 4 $81
	DC.B $37 13  H SCROLL
	DC.B $00 14  ме хяонкэгсеряъ	
	DC.B $02 15  AUTO INC
	DC.B $01 16  SCROLL SIZE
	DC.B $00 17  WINDOW H POSITION
	DC.B $00 18  WINDOW V POSITION
	DC.B $FF 19  одо дкхммю мювюкн
	DC.B $FF 20  одо дкхммю йнмеж
	DC.B $00 21  одо нрйсдю юдпея мхфмхи аюир
	DC.B $00 22  одо нрйсдю юдпея япедмхи аюир
	DC.B $80 23  одо нрйсдю юдпея бепумхи аюир+сопюбкъчыхе аюирш
	
INT *гюршвйю опепшбюмхи
    RTE	

VIDEOINTH
    JMP (A5) напюанрвхй бхденопепшбюмхи цнпхгнмрюкэмшу
VIDEOINTV
    JMP (A4) напюанрвхй бхденопепшбюмхи бепрхйюкэмшу
    
PREPVRAMREAD *бшвхякемхе юдпеяю бхденоюлърх б D6 дкъ времхъ
    MOVEM.L D0-D7/A0-A7,-(A7)
    MOVE.L D6,D0
    AND.W #%1100000000000000,D0
    ROL.W #2,D0
    
    AND.L #%0011111111111111,D6
    ROL.L #8,D6
    ROL.L #8,D6
    
    OR.L D0,D6
    OR.L #$00000000,D6
    
    MOVE.L D6,(VDPCONTROL)
    MOVEM.L (A7)+,D0-D7/A0-A7
    RTS
MEMINIT
    LEA RAM,A0
    LEA VDPCONTROL,A1
    LEA VDPDATA,A2
    MOVE.W #$3FFB,D0
    CLR.L D1

    move.w #$8F01,(A1)
    move.w #$93FF,(A1)
    move.w #$94FF,(A1)
    move.w #$9780,(A1)
    move.l #$40000080,(A1)
    move.w #$0000,(A2) *гювхярйю бхденоюлърх
.L    
    CLR.L (A0)+
    DBRA D0,.L          *гювхярйю RAM
    JSR DMAWAIT
    MOVE.L #$40000010,(A1)  *гювхярйю VSRAM
    MOVE.W #19,D0
.L2    
    MOVE.L D1,(A2)
    DBRA D0,.L2
    MOVE.W #31,D0
    MOVE.L #$C0000000,(A1)  *гювхярйю CRAM 
.L3
    MOVE.L D1,(A2)
    DBRA D0,.L3
    
    RTS
CLEARTILES
    MOVEM.L D0-D7/A0-A7,-(A7) янупюмъел пецхярпш б ярюй
*    MOVE.W #$8F01,(VDPCONTROL) сярюмюбкхбюел юбрн якнфемхе б VDP мю 1, 16 ахрмне якнбн
.L    
    MOVE.W VDPCONTROL,D0
    BTST #1,D0
    BNE .L
    
    MOVE.W #$9300+(($01FE>>1)&$FF),(VDPCONTROL)  ^мхфмее якнбн дкхммш $0xxx 1ff max
    MOVE.W #$9400+((($17F00>>1)&$FF00)>>8),(VDPCONTROL) юдпеяю дкхммш DMA бепумее якнбн дкхммш $xx00
    
    MOVE.W #$9780,(VDPCONTROL) рхо DMA
    MOVE.L #$40000080+(($0000&$3FFF)<<16)+(($0000&$C000)>>14),(VDPCONTROL) юдпея мюгмювемхъ $XXXX&$3FFF) - ($XXXX&$C000)
    
    MOVE.W #$0000,(VDPDATA) гмювемхе дкъ гюонкмемхъ #$yy00
    MOVEM.L (A7)+,D0-D7/A0-A7 бнгбпюыюел пецхярпш хг ярюйю
*    MOVE.W #$8F02,(VDPCONTROL) бнгбпюыюел юбрнякнфемхе мю 2, 32у ахрмне якнбн
    RTS 
    
CLEARTILEMAPA  *нрвхярйю рюиклюою ю
    MOVEM.L D0-D7/A0-A7,-(A7) янупюмъел пецхярпш б ярюй
*    MOVE.W #$8F01,(VDPCONTROL) сярюмюбкхбюел юбрн якнфемхе б VDP мю 1, 16 ахрмне якнбн
.L    
    MOVE.W VDPCONTROL,D0
    BTST #1,D0
    BNE .L
    
    MOVE.W #$9300+(($01FE>>1)&$FF),(VDPCONTROL)  ^мхфмее якнбн дкхммш $0xxx 1ff max
    MOVE.W #$9400+((($1F00>>1)&$FF00)>>8),(VDPCONTROL) юдпеяю дкхммш DMA бепумее якнбн дкхммш $xx00
    
    MOVE.W #$9780,(VDPCONTROL) рхо DMA
    MOVE.L #$40000080+(($C000&$3FFF)<<16)+(($C000&$C000)>>14),(VDPCONTROL) юдпея мюгмювемхъ $C000&$3FFF) - ($D7FF&$C000)
    
    MOVE.W #$0000,(VDPDATA) гмювемхе дкъ гюонкмемхъ #$yy00 гюосяйюел DMA
    MOVEM.L (A7)+,D0-D7/A0-A7 бнгбпюыюел пецхярпш хг ярюйю
*    MOVE.W #$8F02,(VDPCONTROL) бнгбпюыюел юбрнякнфемхе мю 2, 32у ахрмне якнбн
    RTS   
    

CLEARTILEMAPB         *нрвхярйю рюиклюою б
    MOVEM.L D0-D7/A0-A7,-(A7) янупюмъел пецхярпш б ярюй
*   MOVE.W #$8F01,(VDPCONTROL) сярюмюбкхбюел юбрн якнфемхе б VDP мю 1, 16 ахрмне якнбн
.L    
    MOVE.W VDPCONTROL,D0
    BTST #1,D0
    BNE .L
    
    MOVE.W #$9300+(($01FC>>1)&$FF),(VDPCONTROL)  ^мхфмее якнбн дкхммш $0xxx 1ff max
    MOVE.W #$9400+((($1F00>>1)&$FF00)>>8),(VDPCONTROL) юдпеяю дкхммш DMA бепумее якнбн дкхммш $xx00
    
    MOVE.W #$9780,(VDPCONTROL) рхо DMA
    MOVE.L #$40000080+(($E000&$3FFF)<<16)+(($E000&$C000)>>14),(VDPCONTROL) юдпея мюгмювемхъ $C000&$3FFF) - ($D7FF&$C000)
    
    MOVE.W #$0000,(VDPDATA) гмювемхе дкъ гюонкмемхъ #$yy00
    MOVEM.L (A7)+,D0-D7/A0-A7 бнгбпюыюел пецхярпш хг ярюйю
*    MOVE.W #$8F02,(VDPCONTROL) бнгбпюыюел юбрнякнфемхе мю 2, 32у ахрмне якнбн
    RTS 
    
STOP
    JMP STOP

Player_ReadControlsDual:		;D0=1up D1=2up ---7654S321RLDU 
*0 АХР UP
*1 АХР DOWN
*2 АХР LEFT
*3 АХР RIGHT

*4 АХР A
*5 АХР B
*6 АХР C
*7 АХР START

*8 АХР Y
*9 АХР X
*10 АХР MODE
*11 АХР Z
	
*	move.b #%01000000,($A1000B)	; Set direction IOIIIIII (I=In O=Out)
*	move.l #$A10005,a0			;RW port for player 2
*	jsr Player_ReadOne			;Read buttons
	
	move.l d0,-(sp)
		move.b #%01000000,($A10009)	; Set direction IOIIIIII (I=In O=Out)
		move.l #$A10003,a0		;RW port for player 1
		jsr Player_ReadOne		;Read buttons
	move.l (sp)+,d1
	
KeyboardScanner_AllowJoysticks:
	rts
	
Player_ReadOne:			;Read in and reformat a players buttons
	move.b  #$40,(a0)	; TH = 1
	nop		;Delay
	nop
	move.b  (a0),d2		; d0.b = --CBRLDU	Store in D2
	
	move.b	#$0,(a0)	; TH = 0
	nop		;Delay
	nop
	move.b	(a0),d1		; d1.b = --SA--DU	Store in D1
	
	move.b  #$40,(a0)	; TH = 1
	nop		;Delay
	nop
	move.b	#$0,(a0)	; TH = 0
	nop		;Delay
	nop
	move.b  #$40,(a0)	; TH = 1
	nop		;Delay
	nop
	move.b	(a0),d3		; d1.b = --CBXYZM	Store in D3
	move.b	#$0,(a0)	; TH = 0
	
	clr.l d0			;Clear buildup byte
	roxr.b #1,d2
	roxr.b #1,d0			;U
	roxr.b #1,d2
	roxr.b #1,d0			;D
	roxr.b #1,d2
	roxr.b #1,d0			;L
	roxr.b #1,d2
	roxr.b #1,d0			;R
	roxr.b #5,d1
	roxr.b #1,d0			;A
	roxr.b #1,d2
	roxr.b #1,d0			;B
	roxr.b #1,d2
	roxr.b #1,d0			;C
	roxr.b #1,d1
	roxr.b #1,d0			;S
	
	move.l d3,d1
	roxl.l #7,d1		;XYZ
	and.l #%0000011100000000,d1
	or.l d1,d0			
	
	move.l d3,d1
	roxl.l #8,d1		;M
	roxl.l #3,d1		
	and.l #%0000100000000000,d1
	or.l d1,d0
	
	or.l #$FFFFF000,d0	;Set unused bits to 1
	rts

*===========================================================================================================
FONT INCBIN "tilemap\res\fonttilesnemesis.bin"
MENUBGTILES INCBIN "tilemap\res\menubgtiles.bin" 
MENUBGTILEMAP INCBIN "tilemap\res\menubgtilemap.bin"
*===========================================================================================================








; ---------------------------------------------------------------------------
; Nemesis decompression subroutine, decompresses art directly to VRAM
; Inputs:
; a0 = art address
; a VDP command to write to the destination VRAM address must be issued
; before calling this routine
; ---------------------------------------------------------------------------

; =============== S U B R O U T I N E =======================================


Nem_Decomp:
		movem.l	d0-a1/a3-a5,-(sp)
		lea	Nem_PCD_WriteRowToVDP,a3
		lea	VDPDATA,a4	; write all rows to the VDP data port
		bra.s	Nem_Decomp_Main
; End of function Nem_Decomp

; ---------------------------------------------------------------------------
; Nemesis decompression subroutine, decompresses art to RAM
; Inputs:
; a0 = art address
; a4 = destination RAM address
; ---------------------------------------------------------------------------

; =============== S U B R O U T I N E =======================================


Nem_Decomp_To_RAM:
		movem.l	d0-a1/a3-a5,-(sp)
		lea	Nem_PCD_WriteRowToRAM,a3
; End of function Nem_Decomp_To_RAM

; ---------------------------------------------------------------------------
; Main Nemesis decompression subroutine
; ---------------------------------------------------------------------------

; =============== S U B R O U T I N E =======================================


Nem_Decomp_Main:
		lea	$FFA000,a1 *nemcodetable юдпея йнднбни рюакхжш б RAM
		move.w	(a0)+,d2	; get number of patterns
		lsl.w	#1,d2
		bcc.s	PLUS	 *branch if the sign bit isn't set
		adda.w	#Nem_PCD_WriteRowToVDP_XOR-Nem_PCD_WriteRowToVDP,a3	; otherwise the file uses XOR mode
PLUS
		lsl.w	#2,d2	; get number of 8-pixel rows in the uncompressed data
		movea.w	d2,a5	; and store it in a5 because there aren't any spare data registers
		moveq	#8,d3	; 8 pixels in a pattern row
		moveq	#0,d2
		moveq	#0,d4
		bsr.w	Nem_Build_Code_Table
		move.b	(a0)+,d5	; get first byte of compressed data
		asl.w	#8,d5	; shift up by a byte
		move.b	(a0)+,d5	; get second byte of compressed data
		move.w	#$10,d6	; set initial shift value
		bsr.s	Nem_Process_Compressed_Data
		movem.l	(sp)+,d0-a1/a3-a5
		rts
; End of function Nem_Decomp_Main

; ---------------------------------------------------------------------------
; Part of the Nemesis decompressor, processes the actual compressed data
; ---------------------------------------------------------------------------

; =============== S U B R O U T I N E =======================================

; PCD is used throughout this subroutine as an initialism for Process_Compressed_Data
Nem_Process_Compressed_Data:
		move.w	d6,d7
		subq.w	#8,d7	; get shift value
		move.w	d5,d1
		lsr.w	d7,d1	; shift so that high bit of the code is in bit position 7
		cmpi.b	#%11111100,d1	; are the high 6 bits set?
		bcc.s	Nem_PCD_InlineData	; if they are, it signifies inline data
		andi.w	#$FF,d1
		add.w	d1,d1
		move.b	(a1,d1.w),d0	; get the length of the code in bits
		ext.w	d0
		sub.w	d0,d6	; subtract from shift value so that the next code is read next time around
		cmpi.w	#9,d6	; does a new byte need to be read?
		bcc.s	PLUS2	; if not, branch
		addq.w	#8,d6
		asl.w	#8,d5
		move.b	(a0)+,d5	; read next byte
PLUS2
		move.b	1(a1,d1.w),d1
		move.w	d1,d0
		andi.w	#$F,d1	; get palette index for pixel
		andi.w	#$F0,d0

Nem_PCD_GetRepeatCount:
		lsr.w	#4,d0	; get repeat count

Nem_PCD_WritePixel:
		lsl.l	#4,d4	; shift up by a nybble
		or.b	d1,d4	; write pixel
		subq.w	#1,d3	; has an entire 8-pixel row been written?
		bne.s	Nem_PCD_WritePixel_Loop	; if not, loop
		jmp	(a3)	; otherwise, write the row to its destination
; ---------------------------------------------------------------------------

Nem_PCD_NewRow:
		moveq	#0,d4	; reset row
		moveq	#8,d3	; reset nybble counter

Nem_PCD_WritePixel_Loop:
		dbf	d0,Nem_PCD_WritePixel
		bra.s	Nem_Process_Compressed_Data
; ---------------------------------------------------------------------------

Nem_PCD_InlineData:
		subq.w	#6,d6	; 6 bits needed to signal inline data
		cmpi.w	#9,d6
		bcc.s	PLUS3
		addq.w	#8,d6
		asl.w	#8,d5
		move.b	(a0)+,d5
PLUS3
		subq.w	#7,d6	; and 7 bits needed for the inline data itself
		move.w	d5,d1
		lsr.w	d6,d1	; shift so that low bit of the code is in bit position 0
		move.w	d1,d0
		andi.w	#$F,d1	; get palette index for pixel
		andi.w	#$70,d0	; high nybble is repeat count for pixel
		cmpi.w	#9,d6
		bcc.s	Nem_PCD_GetRepeatCount
		addq.w	#8,d6
		asl.w	#8,d5
		move.b	(a0)+,d5
		bra.s	Nem_PCD_GetRepeatCount
; ---------------------------------------------------------------------------

Nem_PCD_WriteRowToVDP:
		move.l	d4,(a4)	; write 8-pixel row
		subq.w	#1,a5
		move.w	a5,d4	; have all the 8-pixel rows been written?
		bne.s	Nem_PCD_NewRow	; if not, branch
		rts	; otherwise the decompression is finished
; ---------------------------------------------------------------------------

Nem_PCD_WriteRowToVDP_XOR:
		eor.l	d4,d2	; XOR the previous row by the current row
		move.l	d2,(a4)	; and write the result
		subq.w	#1,a5
		move.w	a5,d4
		bne.s	Nem_PCD_NewRow
		rts
; ---------------------------------------------------------------------------

Nem_PCD_WriteRowToRAM:
		move.l	d4,(a4)+
		subq.w	#1,a5
		move.w	a5,d4
		bne.s	Nem_PCD_NewRow
		rts
; ---------------------------------------------------------------------------

Nem_PCD_WriteRowToRAM_XOR:
		eor.l	d4,d2
		move.l	d2,(a4)+
		subq.w	#1,a5
		move.w	a5,d4
		bne.s	Nem_PCD_NewRow
		rts
; End of function Nem_Process_Compressed_Data

; ---------------------------------------------------------------------------
; Part of the Nemesis decompressor, builds the code table (in RAM)
; ---------------------------------------------------------------------------

; =============== S U B R O U T I N E =======================================

; BCT is used throughout this subroutine as an initialism for Build_Code_Table
Nem_Build_Code_Table:
		move.b	(a0)+,d0	; read first byte

Nem_BCT_ChkEnd:
		cmpi.b	#$FF,d0	; has the end of the code table description been reached?
		bne.s	Nem_BCT_NewPalIndex	; if not, branch
		rts	; otherwise, this subroutine's work is done
; ---------------------------------------------------------------------------

Nem_BCT_NewPalIndex:
		move.w	d0,d7

Nem_BCT_Loop:
		move.b	(a0)+,d0	; read next byte
		cmpi.b	#$80,d0	; sign bit being set signifies a new palette index
		bcc.s	Nem_BCT_ChkEnd	; a bmi could have been used instead of a compare and bcc
		move.b	d0,d1
		andi.w	#$F,d7	; get palette index
		andi.w	#$70,d1	; get repeat count for palette index
		or.w	d1,d7	; combine the two
		andi.w	#$F,d0	; get the length of the code in bits
		move.b	d0,d1
		lsl.w	#8,d1
		or.w	d1,d7	; combine with palette index and repeat count to form code table entry
		moveq	#8,d1
		sub.w	d0,d1	; is the code 8 bits long?
		bne.s	Nem_BCT_ShortCode	; if not, a bit of extra processing is needed
		move.b	(a0)+,d0	; get code
		add.w	d0,d0	; each code gets a word-sized entry in the table
		move.w	d7,(a1,d0.w)	; store the entry for the code
		bra.s	Nem_BCT_Loop	; repeat
; ---------------------------------------------------------------------------

; the Nemesis decompressor uses prefix-free codes (no valid code is a prefix of a longer code)
; e.g. if 10 is a valid 2-bit code, 110 is a valid 3-bit code but 100 isn't
; also, when the actual compressed data is processed the high bit of each code is in bit position 7
; so the code needs to be bit-shifted appropriately over here before being used as a code table index
; additionally, the code needs multiple entries in the table because no masking is done during compressed data processing
; so if 11000 is a valid code then all indices of the form 11000XXX need to have the same entry
Nem_BCT_ShortCode:
		move.b	(a0)+,d0	; get code
		lsl.w	d1,d0	; shift so that high bit is in bit position 7
		add.w	d0,d0	; get index into code table
		moveq	#1,d5
		lsl.w	d1,d5
		subq.w	#1,d5	; d5 = 2^d1 - 1

Nem_BCT_ShortCode_Loop:
		move.w	d7,(a1,d0.w)	; store entry
		addq.w	#2,d0	; increment index
		dbf	d5,Nem_BCT_ShortCode_Loop	; repeat for required number of entries
		bra.s	Nem_BCT_Loop
; End of function Nem_Build_Code_Table     
	
; ---------------------------------------------------------------------------





*ENIGMA
; FUNCTION:
; 	EniDec
;
; DESCRIPTION
; 	Enigma Decompressor
;
; INPUT:
; 	d0	Starting pattern name (added to each 8x8 before writing to destination)
; 	a0	Source address
; 	a1	Destination address
; ---------------------------------------------------------------------------

flip_x              equ $800     
flip_y              equ $1000      (1<<12)
palette_line_1      equ $2000      (1<<13)
palette_line_2      equ $4000      (2<<13)
high_priority       equ $8000      (1<<15)

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
; ---------------------------------------------------------------------------
EniDec:
	movem.l	d0-d7/a1-a5,-(sp)
	movea.w	d0,a3			; store starting art tile
	move.b	(a0)+,d0
	ext.w	d0
	movea.w	d0,a5			; store first byte, extended to word
	move.b	(a0)+,d4		; store second byte
	lsl.b	#3,d4			; multiply by 8
	movea.w	(a0)+,a2		; store third and fourth byte
	adda.w	a3,a2			; add starting art tile
	movea.w	(a0)+,a4		; store fifth and sixth byte
	adda.w	a3,a4			; add starting art tile
	move.b	(a0)+,d5		; store seventh byte
	asl.w	#8,d5			; shift up by a byte
	move.b	(a0)+,d5		; store eighth byte in lower register byte
	moveq	#16,d6			; 16 bits = 2 bytes

EniDec_Loop:
	moveq	#7,d0			; process 7 bits at a time
	move.w	d6,d7
	sub.w	d0,d7
	move.w	d5,d1
	lsr.w	d7,d1
	andi.w	#$7F,d1			; keep only lower 7 bits
	move.w	d1,d2
	cmpi.w	#$40,d1			; is bit 6 set?
	bhs.s	.got_field		; if it is, branch
	moveq	#6,d0			; if not, process 6 bits instead of 7
	lsr.w	#1,d2			; bitfield now becomes TTSSSS instead of TTTSSSS

.got_field:
	bsr.w	EniDec_ChkGetNextByte
	andi.w	#$F,d2			; keep only lower nybble
	lsr.w	#4,d1			; store upper nybble (max value = 7)
	add.w	d1,d1
	jmp	EniDec_JmpTable(pc,d1.w)
; ---------------------------------------------------------------------------
EniDec_Sub0:
	move.w	a2,(a1)+		; write to destination
	addq.w	#1,a2			; increment
	dbra	d2,EniDec_Sub0		; repeat
	bra.s	EniDec_Loop
; ---------------------------------------------------------------------------
EniDec_Sub4:
	move.w	a4,(a1)+		; write to destination
	dbra	d2,EniDec_Sub4		; repeat
	bra.s	EniDec_Loop
; ---------------------------------------------------------------------------
EniDec_Sub8:
	bsr.w	EniDec_GetInlineCopyVal

.loop:
	move.w	d1,(a1)+
	dbra	d2,.loop

	bra.s	EniDec_Loop
; ---------------------------------------------------------------------------
EniDec_SubA:
	bsr.w	EniDec_GetInlineCopyVal

.loop:
	move.w	d1,(a1)+
	addq.w	#1,d1
	dbra	d2,.loop

	bra.s	EniDec_Loop
; ---------------------------------------------------------------------------
EniDec_SubC:
	bsr.w	EniDec_GetInlineCopyVal

.loop:
	move.w	d1,(a1)+
	subq.w	#1,d1
	dbra	d2,.loop

	bra.s	EniDec_Loop
; ---------------------------------------------------------------------------
EniDec_SubE:
	cmpi.w	#$F,d2
	beq.s	EniDec_End

.loop:
	bsr.w	EniDec_GetInlineCopyVal
	move.w	d1,(a1)+
	dbra	d2,.loop

	bra.s	EniDec_Loop
; ---------------------------------------------------------------------------
; Enigma_JmpTable:
EniDec_JmpTable:
	bra.s	EniDec_Sub0
	bra.s	EniDec_Sub0
	bra.s	EniDec_Sub4
	bra.s	EniDec_Sub4
	bra.s	EniDec_Sub8
	bra.s	EniDec_SubA
	bra.s	EniDec_SubC
	bra.s	EniDec_SubE
; ---------------------------------------------------------------------------
EniDec_End:
	subq.w	#1,a0
	cmpi.w	#16,d6		; were we going to start on a completely new byte?
	bne.s	.got_byte	; if not, branch
	subq.w	#1,a0

.got_byte:
	move.w	a0,d0
	lsr.w	#1,d0		; are we on an odd byte?
	bhs.s	.even_loc	; if not, branch
	addq.w	#1,a0		; ensure we're on an even byte

.even_loc:
	movem.l	(sp)+,d0-d7/a1-a5
	rts
; End of function EniDec
; ===========================================================================

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
; ---------------------------------------------------------------------------
EniDec_GetInlineCopyVal:
	move.w	a3,d3		; store starting art tile
	move.b	d4,d1
	add.b	d1,d1
	bhs.s	.skip_pri	; if d4 was < $80
	subq.w	#1,d6		; get next bit number
	btst	d6,d5		; is the bit set?
	beq.s	.skip_pri	; if not, branch
	ori.w	#high_priority,d3	; set high priority bit

.skip_pri:
	add.b	d1,d1
	bhs.s	skip_pal2	; if d4 was < $40
	subq.w	#1,d6		; get next bit number
	btst	d6,d5
	beq.s	skip_pal2
	addi.w	#palette_line_2,d3	; set second palette line bit

skip_pal2:
	add.b	d1,d1
	bhs.s	.skip_pal1	; if d4 was < $20
	subq.w	#1,d6		; get next bit number
	btst	d6,d5
	beq.s	.skip_pal1
	addi.w	#palette_line_1,d3	; set first palette line bit

.skip_pal1:
	add.b	d1,d1
	bhs.s	.skip_flipy	; if d4 was < $10
	subq.w	#1,d6		; get next bit number
	btst	d6,d5
	beq.s	.skip_flipy
	ori.w	#flip_y,d3	; set Y-flip bit

.skip_flipy:
	add.b	d1,d1
	bhs.s	.skip_flipx	; if d4 was < 8
	subq.w	#1,d6
	btst	d6,d5
	beq.s	.skip_flipx
	ori.w	#flip_x,d3	; set X-flip bit

.skip_flipx:
	move.w	d5,d1
	move.w	d6,d7		; get remaining bits
	sub.w	a5,d7		; subtract minimum bit number
	bhs.s	.got_enough	; if we're beyond that, branch
	move.w	d7,d6
	addi.w	#16,d6		; 16 bits = 2 bytes
	neg.w	d7			; calculate bit deficit
	lsl.w	d7,d1		; make space for this many bits
	move.b	(a0),d5		; get next byte
	rol.b	d7,d5		; make the upper X bits the lower X bits
	add.w	d7,d7
	and.w	EniDec_AndVals-2(pc,d7.w),d5	; only keep X lower bits
	add.w	d5,d1		; compensate for the bit deficit

.got_field:
	move.w	a5,d0
	add.w	d0,d0
	and.w	EniDec_AndVals-2(pc,d0.w),d1	; only keep as many bits as required
	add.w	d3,d1		; add starting art tile
	move.b	(a0)+,d5	; get current byte, move onto next byte
	lsl.w	#8,d5		; shift up by a byte
	move.b	(a0)+,d5	; store next byte in lower register byte
	rts
; ---------------------------------------------------------------------------
.got_enough:
	beq.s	.got_exact	; if the exact number of bits are leftover, branch
	lsr.w	d7,d1		; remove unneeded bits
	move.w	a5,d0
	add.w	d0,d0
	and.w	EniDec_AndVals-2(pc,d0.w),d1	; only keep as many bits as required
	add.w	d3,d1		; add starting art tile
	move.w	a5,d0		; store number of bits used up by inline copy
	bra.s	EniDec_ChkGetNextByte	; move onto next byte
; ---------------------------------------------------------------------------
.got_exact:
	moveq	#16,d6		; 16 bits = 2 bytes
	bra.s	.got_field
; ---------------------------------------------------------------------------
EniDec_AndVals:
	dc.w	 1,    3,    7,   $F
	dc.w   $1F,  $3F,  $7F,  $FF
	dc.w  $1FF, $3FF, $7FF, $FFF
	dc.w $1FFF,$3FFF,$7FFF,$FFFF
; End of function EniDec_GetInlineCopyVal
; ===========================================================================

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
; ---------------------------------------------------------------------------
EniDec_ChkGetNextByte:
	sub.w	d0,d6
	cmpi.w	#9,d6
	bhs.s	.done
	addq.w	#8,d6		; 8 bits = 1 byte
	asl.w	#8,d5		; shift up by a byte
	move.b	(a0)+,d5	; store next byte in lower register byte

.done:
	rts
; End of function EniDec_ChkGetNextByte
; ===========================================================================

; ---------------------------------------------------------------------------
; Kosinski decompression subroutine
; Inputs:
; a0 = compressed data location
; a1 = destination
; ---------------------------------------------------------------------------

; =============== S U B R O U T I N E =======================================


Kos_Decomp:
		subq.l	#2,sp	; make space for two bytes on the stack
		move.b	(a0)+,1(sp)
		move.b	(a0)+,(sp)
		move.w	(sp),d5	; copy first description field
		moveq	#$F,d4	; 16 bits in a byte

Kos_Decomp_Loop:
		lsr.w	#1,d5	; bit which is shifted out goes into C flag
		move	sr,d6
		dbf	d4,Kos_Decomp_ChkBit
		move.b	(a0)+,1(sp)
		move.b	(a0)+,(sp)
		move.w	(sp),d5	; get next description field if needed
		moveq	#$F,d4	; reset bit counter

Kos_Decomp_ChkBit:
		move	d6,ccr	; was the bit set?
		bcc.s	Kos_Decomp_Match	; if not, branch (C flag clear means bit was clear)
		move.b	(a0)+,(a1)+	; otherwise, copy byte as-is
		bra.s	Kos_Decomp_Loop
; ---------------------------------------------------------------------------

Kos_Decomp_Match:
		moveq	#0,d3
		lsr.w	#1,d5	; get next bit
		move	sr,d6
		dbf	d4,Kos_Decomp_ChkBit2
		move.b	(a0)+,1(sp)
		move.b	(a0)+,(sp)
		move.w	(sp),d5
		moveq	#$F,d4

Kos_Decomp_ChkBit2:
		move	d6,ccr	; was the bit set?
		bcs.s	Kos_Decomp_FullMatch	; if it was, branch
		lsr.w	#1,d5	; bit which is shifted out goes into X flag
		dbf	d4,.LOOP
		move.b	(a0)+,1(sp)
		move.b	(a0)+,(sp)
		move.w	(sp),d5
		moveq	#$F,d4
.LOOP
		roxl.w	#1,d3	; get high repeat count bit (shift X flag in)
		lsr.w	#1,d5
		dbf	d4,.LOOP2
		move.b	(a0)+,1(sp)
		move.b	(a0)+,(sp)
		move.w	(sp),d5
		moveq	#$F,d4
.LOOP2
		roxl.w	#1,d3	; get low repeat count bit
		addq.w	#1,d3	; increment repeat count
		moveq	#-1,d2
		move.b	(a0)+,d2	; calculate offset
		bra.s	Kos_Decomp_MatchLoop
; ---------------------------------------------------------------------------

Kos_Decomp_FullMatch:
		move.b	(a0)+,d0	; get first byte
		move.b	(a0)+,d1	; get second byte
		moveq	#-1,d2
		move.b	d1,d2
		lsl.w	#5,d2
		move.b	d0,d2	; calculate offset
		andi.w	#7,d1	; does a third byte need to be read?
		beq.s	Kos_Decomp_FullMatch2	; if it does, branch
		move.b	d1,d3	; copy repeat count
		addq.w	#1,d3	; and increment it

Kos_Decomp_MatchLoop:
		move.b	(a1,d2.w),d0
		move.b	d0,(a1)+	; copy appropriate byte
		dbf	d3,Kos_Decomp_MatchLoop	; and repeat the copying
		bra.s	Kos_Decomp_Loop
; ---------------------------------------------------------------------------

Kos_Decomp_FullMatch2:
		move.b	(a0)+,d1
		beq.s	Kos_Decomp_Done	; 0 indicates end of compressed data
		cmpi.b	#1,d1
		beq.w	Kos_Decomp_Loop	; 1 indicates a new description needs to be read
		move.b	d1,d3	; otherwise, copy repeat count
		bra.s	Kos_Decomp_MatchLoop
; ---------------------------------------------------------------------------

Kos_Decomp_Done:
		addq.l	#2,sp	; restore stack pointer to original state
		rts
; End of function Kos_Decomp


*-----------------------------------------------------------
* Title      :LOGO
* Written by :88M
* Date       :06.02.2022
* Description:кнцнрхо RTB
*-----------------------------------------------------------
    
* 888888             888888888          88888888888       888888888  
* 888888            88888888888        888888888888      88888888888 
* 888888            88888888888       8888888888888      88888888888 
* 888888           888 88888 888     88888888888888     888 88888 888
* 888888           88 8888888 88     88888888888888     88 8888888 88
* 888888           88 8888888 88     88888888888888     88 8888888 88
* 888888           88 88   88 88     88888              88 88   88 88
* 888888           88 88   88 88     88888 88888888     88 88   88 88
* 888888           88 88   88 88     88888 88888888     88 88   88 88
* 888888           88 88   88 88     88888 88888888     88 88   88 88
* 888888           88 88   88 88     88888 88888 88     88 88   88 88
* 888888           88 88   88 88     88888 88888 88     88 88   88 88
* 888888           88 88   88 88     88888 88888 88     88 88   88 88
* 8888888888888    88 8888888 88     88888888888 88     88 8888888 88
* 8888888888888    88 8888888 88     88888888888 88     88 8888888 88
*  888888888888    888 88888 888     88888888888 88     888 88888 888
*  888888888888     88888888888       8888888888888      88888888888 
*   88888888888     88888888888        888888888888      88888888888 
*     888888888      888888888          88888888888       888888888  

    

RTBLOGO
    
    LEA $10(A7),A7       *ДНОНКМЕМХЕ НР ЯЕАЪ ВРН АШ БНЯЯРЮМНБХРЭ ЯРЕЙ ОНЯКЕ gemsinit
    MOVE.B #0,(A7)
    JSR gemsstartsong    *гЮОСЯЙЮЕЛ ЛЕКНДХЧ ЛЕМЧ

    

    
*    MOVE.L #$C0020000,D6 юдпея мювюкю оюкхрпш кнцн
*    JSR PREPVRAM цнрнбхл бхденоюлърэ
MENUSKIP            *дКЪ ОПНОСЯЙЮ ЛЕМЧ ДКЪ дЕАЮЦЮ
    *JMP LEVEL0 
   
    
    LEA RAM,A0
    
    MOVE.W #$0000,(A0)+
    MOVE.L #$0EEE0A00,(A0)+   гюйхдшбюел оюкхрпс кнцн 
    MOVE.L #$0E800E60,(A0)+
    MOVE.L #$0E400E20,(A0)+
    MOVE.L #$0E000000,(A0)+
    
    LEA RTBLOGOTILES,A0 сйюгшбюел юдпея рюикнб
    MOVEQ #32,D6    сйюгшбюел юдпея б бхденоюлърх йсдю яйкюдшбюрэ
    
    JSR PREPVRAM
    JSR Nem_Decomp пюяоюйнбшбюел рюикш
    
    MOVEQ #$1,D0 ядбхц он рюикюл
    LEA RTBLOGOTILEMAP,A0 хяундмши яфюрши рюиклюо
    LEA $FFA000,A1 юдпея б ноепюрхбмни оюлърх
    
    JSR EniDec дейнлопеяяхъ
    
    MOVE.L #VRAMTILEMAPB+1694,D6 мювюкэмши юдпея йсдю асдел оепейкюдшбюрэ 1664 ьхпхмю
    MOVEQ #4,D0
    MOVEQ #4,D1
    JSR PREPVRAM
    
.LOOP    
    MOVE.L (A1)+,VDPDATA  
    DBRA D0,.LOOP
    
    ADD.L #128,D6
    JSR PREPVRAM
    MOVEQ #4,D0
    DBRA D1,.LOOP жхйк дкъ оепецпсгйх рюиклюою хг ноепюрхбмни оюлърх б бхденоюлърэ (нрмхлюрэ мюдн #$222 нр оюкхрпш)
    
    



    MOVEQ #11,D5 оепелеммюъ дкъ бпюыемхъ
    MOVEQ #100,D6

       
    LEA .PRELOOP,A6
    
    JMP FADETOPAL
.PRELOOP    
    MOVE.L #$0A000E80,D1   намнбкъел бпюыюелсч оюкхрпс
    MOVE.L #$0E600E40,D2
    MOVE.L #$0E200E00,D3
.LOOPROT
       
    SWAP D1 лемъел леярюлх 16ахрмше онкнбхмйх пецхярпю
    SWAP D2
    SWAP D3
    
    MOVE.W D1,-(A7) нропюбкъел лкюдьсч вюярэ б ярюй
    MOVE.W D2,-(A7)
    MOVE.W D3,-(A7)
    
    MOVE.W (A7)+,D2 днярю╗л лкюдьсч вюярэ хг ярюйю б дпсцнл онпъдйе
    MOVE.W (A7)+,D1
    MOVE.W (A7)+,D3
    
    
    JSR VBLANKSTART яхмупнмхгхпселяъ
    MOVE.L #$C0040000,VDPCONTROL ярюбхл оепбши жбер мю бшанпйс
    MOVE.L D1,VDPDATA бшяшкюел ядбхмсрсч оюкхрпс
    MOVE.L D2,VDPDATA
    MOVE.L D3,VDPDATA
    JSR VBLANKEND
    JSR VBLANKSTART
    JSR VBLANKEND
    JSR VBLANKSTART
    JSR VBLANKEND
    JSR VBLANKSTART гюдепфйю 3 йюдпю
    JSR VBLANKEND



    DBRA D5,.LOOPROT
    
    
    
    LEA MENU,A6
    JMP GLOBALFADE
    
    
   

.DMA
    MOVE.W #$9300+(($0010>>1)&$FF),(VDPCONTROL)  ^мхфмее якнбн дкхммш $0xxx 1ff max
    MOVE.W #$9400+((($0000>>1)&$FF00)>>8),(VDPCONTROL) юдпеяю дкхммш DMA бепумее якнбн дкхммш $xx00
    
   move.w #$9500+(($58>>1)&$FF),(VDPCONTROL) мхфмхи юдпея хярнвмхйю
    move.w #$9600+((($0000>>1)&$FF00)>>8),(VDPCONTROL) япедмхи юдпея хярнвмхйю
    move.w #$9700+((($FF0000>>1)&$7F0000)>>16),(VDPCONTROL) бшяьхи юдпея хярнвмхйю

*    to CRAM:    

    move.l #$C0000080+($02<<16),(VDPCONTROL)
    RTS
    
.DMA2
    MOVE.W #$9300+(($0010>>1)&$FF),(VDPCONTROL)  ^мхфмее якнбн дкхммш $0xxx 1ff max
    MOVE.W #$9400+((($0000>>1)&$FF00)>>8),(VDPCONTROL) юдпеяю дкхммш DMA бепумее якнбн дкхммш $xx00
    
   move.w #$9500+(($00>>1)&$FF),(VDPCONTROL) мхфмхи юдпея хярнвмхйю
    move.w #$9600+((($0000>>1)&$FF00)>>8),(VDPCONTROL) япедмхи юдпея хярнвмхйю
    move.w #$9700+((($FF0000>>1)&$7F0000)>>16),(VDPCONTROL) бшяьхи юдпея хярнвмхйю

*    to CRAM:    

    move.l #$C0000080+($02<<16),(VDPCONTROL)
    RTS
*========================================================================================================================
GLOBALFADE *цкнаюкэмне гюрсуюмхе оюкхрпш х бнгбпюр он юдпеяс (A6)
    LEA RAM,A1  аеп╗л юдпея оюлърх
    MOVEQ #31,D2 оепелеммюъ дкъ явхршбюмхъ жбернбни оюлърх жхйкнрпнм
    MOVEQ #63,D5 оепелеммюъ дкъ ндмни напюанрйх бяеу ъвеей жберю 
    MOVEQ #10,D3 оепелеммюъ дкъ наыху опнунднб+DMA 
    MOVE.L #$00000020,VDPCONTROL бшярюбкъел бхден(жбернбсч)оюлърэ мю времхе
    
.LOOP
    MOVE.L VDPDATA,(A1)+ вхрюел х яйкюдшбюел б RAM я онярхмйпхлемрнл ю1
        
    DBRA D2,.LOOP жхйкнрпнм онйю ме явхрюел бяч бхден(жбернбсч)оюлърэ
    
.LOOP2
    LEA RAM,A1 бняярюмюбкхбюел юдпея RAM
    


    MOVE.W (A1),D1 вхрюел оепбсч ъвеийс жберю
    
.RED    
    BTST.L #1,D1 реярхпсел ахр 1,2,3
    BNE .REDMINUS еякх б ахрюу врн рн еярэ хд╗л нрмхлюрэ жбер
    
    BTST.L #2,D1
    BNE .REDMINUS
    
    BTST.L #3,D1
    BNE .REDMINUS
    
.GREEN

    BTST.L #5,D1
    BNE .GREENMINUS
    
    BTST.L #6,D1
    BNE .GREENMINUS
    
    BTST.L #7,D1
    BNE .GREENMINUS
        
.BLUE
    
    BTST.L #9,D1
    BNE .BLUEMINUS
    
    BTST.L #10,D1
    BNE .BLUEMINUS
    
    BTST.L #11,D1
    BNE .BLUEMINUS
    
.NEXT    
    MOVE.W D1,(A1)+ б йнмже бяеу бшвхякемхи ъвеийс бнгбпюыюел напюрмн б RAM х опхаюбкъел якед юдпея
    
    MOVE.W (A1),D1 онксвюел мнбсч жбернбсч ъвеийс
           
   
    DBRA D5,.RED жхйкнрпнм х мювхмюел ямнбю наявхршбюрэ мнбсч жбернбсч ъвеийс
    
    JSR VBLANKSTART акнй DMA х гюдепфей
    JSR VBLANKEND

    JSR VBLANKSTART
    JSR .DMA2    
    MOVEQ #63,D5
    JSR VBLANKEND
    JSR VBLANKSTART
    JSR VBLANKEND
    JSR VBLANKSTART
    JSR VBLANKEND
 


    
    DBRA D3,.LOOP2 наыхи жхйкнрпнм сцюяюмхъ оюкхрпш
    
        
    JMP (A6)  
    
.REDMINUS    
    SUB.B #$02,D1
    JMP .GREEN
.GREENMINUS
    SUB.B #$20,D1
    JMP .BLUE
.BLUEMINUS
    SUB.W #$0200,D1
    JMP .NEXT    

.DMA2
    MOVE.W #$9300+(($0080>>1)&$FF),(VDPCONTROL)  ^мхфмее якнбн дкхммш $0xxx 1ff max
    MOVE.W #$9400+((($0000>>1)&$FF00)>>8),(VDPCONTROL) юдпеяю дкхммш DMA бепумее якнбн дкхммш $xx00
    
   move.w #$9500+(($00>>1)&$FF),(VDPCONTROL) мхфмхи юдпея хярнвмхйю
    move.w #$9600+((($0000>>1)&$FF00)>>8),(VDPCONTROL) япедмхи юдпея хярнвмхйю
    move.w #$9700+((($FF0000>>1)&$7F0000)>>16),(VDPCONTROL) бшяьхи юдпея хярнвмхйю

*    to CRAM:    

    move.l #$C0000080+($00<<16),(VDPCONTROL)
    RTS    
    
*=================================================================================================================    
FADETOPAL *б мювюкн RAM гюцпсфюеряъ оюкхрпю б йнрнпсч мсфмн бнгбеярхяэ бнгбпюр б ю6 гюцпсгйю оюкхрпш б мювюкн RAM
	*MOVE.W #$0EEE,(RAM)  деаюц
	MOVEM.L D0-D7/A0-A6,-(A7)			*яоюяюел пецхярпш
    MOVEQ #63,D2	 	*дкъ жхйкнрпнмю
    LEA RAM,A0 			*сйюгюрекэ ноепюрхбмни
    LEA RAM+136,A1 		*сйюгюрекэ ноепюрхбмни дкъ рпюмятнплюжхи
    MOVEQ #6,D1 		*дкъ жхйкнрпнмю
    CLR D7				
	MOVE.L #2,D0		*дкъ жхйпкнрпнмю
.L
	
	CLR D3				*вхярхл пюанвхе пецхярпш
	CLR D4
	CLR D5
	CLR D6
	
    MOVE.W (A0)+,D3  *хяундмши   
    MOVE.W (A1),D4 	*оепелеммши		днашбюел 2 жберю хяундмши х оепелеммши йнрнпши асдел рпюмятнплхпнбюрэ
	
	LSL.W #3,D3			*оепбши ядбхц я сдюкемхел кхьмху мскеи
	LSL.W #3,D4
	
.L2	
	LSL.W #1,D3
	LSL.W #1,D4
	
	LSL.W #1,D3		*брнпни рнвмши ядбхц
	ROXL.W #1,D5	*хяундмши
	
	LSL.W #1,D4		
	ROXL.W #1,D6		*оепелеммши
	
	LSL.W #1,D3			
	ROXL.W #1,D5
	
	LSL.W #1,D4
	ROXL.W #1,D6
	
	LSL.W #1,D3			
	ROXL.W #1,D5
	
	LSL.W #1,D4
	ROXL.W #1,D6		*мювхмюел ясднпнфмн оепеахпюрэ врн аш опхбеярх й сднамнлс дкъ опнжеяянпю бхдс
	
	CMP.W D5,D6			*япюбмхбюел он 1 жберс
	BNE .COLORADD		*еякх люкн днаюбхрэ
	BEQ .COLSHIFT		*еякх пюбмн гюдбхцюел х хд╗л дюкэье
.COLJMP	
	
	
	DBRA D0,.L2
	
	MOVE.W D7,(A1)+ 	*еякх опнькхяэ он жберс гюяшкюел рпюмятнплхпнбюммши бюпхюмр б оюлърэ х хд╗л дюкэье
    MOVE.L #2,D0
	
    DBRA D2,.L  
    
    
    
    JSR VBLANKSTART
    
    JSR .DMA			*нряшкйю бпелеммни рпюмятнплюжхх б бхденвхо
    MOVEQ #63,D2
    LEA RAM,A0
    LEA RAM+136,A1
    
    
    JSR VBLANKEND    
    JSR VBLANKSTART
    JSR VBLANKEND
    
    JSR VBLANKSTART
    JSR VBLANKEND
    JSR VBLANKSTART
    JSR VBLANKEND


 
    
    DBRA D1,.L
    *JSR VBLANKSTART
    *JSR .DMA2   
    MOVEM.L (A7)+,D0-D7/A0-A6
	
    JMP (A6)

.COLORADD
	ADDQ #1,D6
	
.COLSHIFT	*онякедмъъ рпюмятнплюжхъ дкъ бнгбпюыемхъ б тнплюр бхденвхою яецх
	LSL.B #6,D6
	ROXL.W #1,D7
	LSL.B #1,D6
	ROXL.W #1,D7
	LSL.B #1,D6
	ROXL.W #1,D7
	LSL.W #1,D7
	
	CLR D5
	CLR D6
	
	JMP .COLJMP
   
.DMA *оепеапняйю бпелеммни оюкхрпш
    MOVE.W #$9300+(($0080>>1)&$FF),(VDPCONTROL)  ^мхфмее якнбн дкхммш $0xxx 1ff max
    MOVE.W #$9400+((($0000>>1)&$FF00)>>8),(VDPCONTROL) юдпеяю дкхммш DMA бепумее якнбн дкхммш $xx00
    
   move.w #$9500+(($88>>1)&$FF),(VDPCONTROL) мхфмхи юдпея хярнвмхйю
    move.w #$9600+((($0000>>1)&$FF00)>>8),(VDPCONTROL) япедмхи юдпея хярнвмхйю
    move.w #$9700+((($FF0000>>1)&$7F0000)>>16),(VDPCONTROL) бшяьхи юдпея хярнвмхйю

*    to CRAM:    

    move.l #$C0000080+($00<<16),(VDPCONTROL)
    RTS    
        
*.DMA2 *оепеапняйю нпхцхмюкэмни оюкхрпш
*    MOVE.W #$9300+(($0080>>1)&$FF),(VDPCONTROL)  ^мхфмее якнбн дкхммш $0xxx 1ff max
*    MOVE.W #$9400+((($0000>>1)&$FF00)>>8),(VDPCONTROL) юдпеяю дкхммш DMA бепумее якнбн дкхммш $xx00
    
*   move.w #$9500+(($00>>1)&$FF),(VDPCONTROL) мхфмхи юдпея хярнвмхйю
*    move.w #$9600+((($0000>>1)&$FF00)>>8),(VDPCONTROL) япедмхи юдпея хярнвмхйю
*    move.w #$9700+((($FF0000>>1)&$7F0000)>>16),(VDPCONTROL) бшяьхи юдпея хярнвмхйю

*    to CRAM:    

*    move.l #$C0000080+($00<<16),(VDPCONTROL)
*    RTS    
*===================================================================================================================
*           8888     8888            888888888888 8888888888888    888 888  888 888
*          888888   888888          8888888888888 88888888888888   888 888  888 888
*         88888888 88888888        88888888888888 888888888888888  888 888  888 888
*         888  888 888  888       8888                        8888 888 888  888 888
*         88888888888888 888     8888  8888888888 88888888888  888 888 888  888 888
*        888 88 88888 88 888     888  88888888888 888888888888 888 888 888  888 888
*        888 88888888 888888     888 888888888888 888888888888 888 888 888  888 888
*       88888888 88888888 888    888 888          888 888  888 888 888 888  888 888
*       888 8888 888 8888 888    888 8888888888   888 888  888 888 888 888  888 888
*       888 88888888 88888888    888 8888888888   888 888  888 888 888 888  888 888
*      888 888888 8 888888 888   888 8888888888   888 888  888 888 888 888  888 888
*      888 888888 8 888888 888   888              888 888  888 888 888 888  888 888
*      888 888 88888888 8888888  888 8888888888   888 888  888 888 888 888  888 888
*     888 888  888 888  888 888  888 8888888888   888 888  888 888 888 888  888 888
*     888 888  8888888  888 888  888 8888888888   888 888  888 888 888 888  888 888
*     8888888   88888    888 888 888 888          888 888  888 888 888 888  888 888
*    888 888    88888    888 888 888 888888888888 888 888  888 888 888 88888888 888
*    888 888     8888    888 888 888  88888888888 888 888  888 888 888 88888888 888
*    8888888     888      888 8888888  8888888888 888 888  888 888 888  888888  888
*    88 888      888      888 888 8888            888 888  888 888  888        888 
*    88 888       88      888 888  88888888888888 888 888  888 888  88888888888888 
*    888888       8        888 888  8888888888888 888 888  888 888   888888888888  
*    8 888        8        888 888   888888888888 888 888  888 888    8888888888   
MENU
    MOVE.W #$9003,VDPCONTROL *ялемю пефхлю 32X128
    LEA MENUBGTILES,A0 гюцпсгйю рюикнб б ю0
    MOVE.L #VRAM,D6 гюцпсгйю юдпеяю бхденоюлърх
    JSR PREPVRAM ондцнрнбйю бхденоюлърх
    JSR Nem_Decomp пюяоюйнбйю рюикнб
    
    LEA $FFA000,A1 леярн йсдю асдел яйкюдшбюрэ рюиклюо
    LEA MENUBGTILEMAP,A0 гюцпсфюел юдпея рюиклюою
    MOVEQ #0,D0 ядбхц он рюикюл
    JSR EniDec пюяоюйнбйю рюиклюою
    
    
    move.w #$9300+(($11F>>1)&$FF),VDPCONTROL мхфмее якнбн дкхммш
    move.w #$9400+((($1500>>1)&$FF00)>>8),VDPCONTROL бепумее якнбн дкхммш
    move.w #$9500+(($00>>1)&$FF),VDPCONTROL мхфмхи юдпея хярнвмхйю
    move.w #$9600+((($A000>>1)&$FF00)>>8),VDPCONTROL япедмхи юдпея хярнвмхйю
    move.w #$9700+((($FF0000>>1)&$7F0000)>>16),VDPCONTROL бепумхи юдпея хярнвмхйю
    
    move.l #$40000080+(($E000&$3FFF)<<16)+(($E000&$C000)>>14),VDPCONTROL юдпея мюгмювемхъ+гюосяй DMA
    
    MOVE.W #$8B03,VDPCONTROL
    

    
    LEA $FFA000,A0 гюцпсгйю оюлърх ядбхцнбни рюакхжш б ю0
    
    MOVE.L #$0,(A0)+ гюонкмемхе оепбшу мепюанвху якнб
    
    MOVE.W #$0000,D1
    MOVE.W #$01FF,D2
    MOVE.W #173,D3
.L
    MOVE.W D1,(A0)+ яйпнкхмц рюиклюою ю=0
    MOVE.W D2,(A0)+ яйпнкхмц рюиклюою б=мювюкэмюъ онгхжхъ
    
    DBRA D3,.L жхйкнрпнм

    JSR .DMA                         
    MOVE.L #CRAM,VDPCONTROL пюанрю я оюкхрпни
    LEA VDPDATA,A0
    MOVE.L #$00000006,(A0)    
    MOVE.L #$000A002C,(A0)  
    MOVE.W #$0EEE,(A0)
    

    LEA $FFA004,A0 гюцпсгйю мювюкэмнцн юдпеяю рюакхжш
    MOVE.W #$01FF,D3 гюцпсгйю оепелеммни дкъ ядбхцю
    MOVE.W #$01FF,D4  1FF
    MOVE.W #$01FF,D5
    MOVE.W #550,D6
    
    MOVE.W #86,D7
    
    MOVE.W #$8228,VDPCONTROL хглемемхе юдпеяю рюиклюою ю
    
.L2 
    CMP #0,D2 опнбепъел D2
    BNE .D2MIN еякх ме мнкэ нрмхлюел
.L3    
    CMP #$0400,D3 опнбепъел D3 
    BLT .D3PLU  еякх ме 400 опхаюбкъел
.L4
    
    MOVE.W D1,(A0)+ бшйкюдшбюел пецхярпш б оюлърэ
    MOVE.W D2,(A0)+
    MOVE.W D1,(A0)+
    MOVE.W D3,(A0)+
        
    DBRA D7,.L2 жхйкнрпнм якед ярпюмхжю оюлърх
    
    

    JSR VBLANKSTART фд╗л йнмжю йюдпю
    JSR .DMA        
    LEA $FFA004,A0  бняярюмнбкемхе юдпеяю рюакхжш бпюыемхъ
    MOVE.W #86,D7  бняярюмюбкхбюел жхйкнрпнм
    
    CMP #0,D4
    BNE .D4MIN 
.L6 
    CMP #$0400,D5
    BLT .D5PLU 
.L7    
    
    MOVE.W D4,D2 
    MOVE.W D5,D3
    
    DBRA D6,.L2 жхйкнрпнм
    
    MOVE.W #$24C0,D6 мювюкэмши юдпея рюикнб б бхденоюлърх
    JSR PREPVRAM
    
    MOVE.W #MENUWINDOWTILES,A0
    JSR Nem_Decomp  пюяоюйнбйю рюиклюою нймю
    
    MOVE.W #$126,D0 днаюбйю он рюиклюос
    
    
    MOVE.W #MENUWINDOWTILEMAP,A0 
    
    JSR EniDec пюяоюйнбйю рюиклюою б RAM
    
    MOVE.L #VRAMTILEMAPB+4380,D6 мювюкэмши юдпея рюиклюою нймю
    JSR PREPVRAM
    
    
    
    MOVEQ #11,D7 жхйк дкъ оепемняю ярпнвйх оепелеммюъ
    MOVEQ #8,D2 оепелеммюъ дкъ оепемняю мю якед ярпнйс
    
.G
    MOVE.W (A1)+,D1 аеп╗л йсянй рюиклюою
    MOVE.W D1,VDPDATA йкюд╗л
    

    DBRA D7,.G жхйкнрпнм онйю ме бшбедел бяе ярпнйх
    
    MOVEQ #11,D7 бняярюмюбкхбюел жхйкнрпнм ярпнй
    ADD.W #256,D6 днаюбкъел юдпея бхденоюлърх дн якед ярпнйх
    JSR PREPVRAM цнрнбхл оюлърэ
    JSR VBLANKEND
    JSR VBLANKSTART
    DBRA D2,.G жхйк бшбндю бяеу ярпнй
    
    MOVE.W #FONT,A0 гюцпсгйю ьпхтрю
    MOVE.W #$4000,D6 онгхжхъ ьпхтрю б оюлърх
    JSR PREPVRAM
    
    JSR Nem_Decomp
    
    MOVE.L #$C01A0000,VDPCONTROL гюонкмемхе ъвеей жберю ьпхтрю
    MOVE.W #$0828,VDPDATA
    MOVE.L #$06260424,VDPDATA
    
    MOVE.L #$C03A0000,VDPCONTROL гюонкмемхе ъвеей жберю дкъ бшдекемхъ
    MOVE.W #$0AAA,VDPDATA
    MOVE.L #$08880666,VDPDATA
    
    JSR VBLANKSTART
    MOVE.L #$FF9FFF,A4  гюмняхл б юдпеямши пецхярп
    MOVE.B #$1,$FF9FFF   оепелеммюъ б RAM дкъ пюанрш лемч
    MOVE.W #$8B00,VDPCONTROL бняярюмнбкемхе яйпнкхмцю щйпюмю        
.TEXTSTART
    MOVE.W #VRAMTILEMAPB+4896,D6 сярюмнбйю юдпеяю мюдохях
    JSR PREPVRAM
    
    MOVE.W #$200,D2 онярнъммюъ дкъ рюиклюою
    MOVE.W #MENUTEXT,A2  упюмхкхые рейярю
    MOVEQ #4,D1  оепелеммюъ дкъ жхйкнрпнмю
    MOVE.L #VDPDATA,A3
.start          *бшбнд START
    MOVE.B (A2)+,D2 гюйхдшбюел хг тюикю рейяр
    MOVE.W D2,(A3)   оепейхдшбюел б бхденвхо
    DBRA D1,.start жхйкнрпнм онйю ме бшбедел бяе асйбш мю ярпнйе
    
    ADD.W #256,D6 днаюбкъел юдпея бхденоюлърх дн якед ярпнйх
    JSR PREPVRAM цнрнбхл бхденоюлърэ
    MOVEQ #7,D1 днаюбкъел дкъ мнбнцн жхйкнрпнмю х дюкэье
.continue    *бшбнд CONTINUE
    MOVE.B (A2)+,D2
    MOVE.W D2,(A3)
    
    DBRA D1,.continue
    
    ADD.W #256,D6
    JSR PREPVRAM
    MOVEQ #5,D1
.option     *бшбнд OPTION
    MOVE.B (A2)+,D2
    MOVE.W D2,(A3)
    
    DBRA D1,.option
    ADD.W #256,D6
    JSR PREPVRAM
    MOVEQ #3,D1
.quit       *бшбнд QUIT
    MOVE.B (A2)+,D2
    MOVE.W D2,(A3)
    
    DBRA D1,.quit
    ADD.W #1024,D6
    JSR PREPVRAM
    MOVEQ #3,D1
 
    
.1996
    MOVE.B (A2)+,D2
    MOVE.W D2,(A3)
    
    DBRA D1,.1996
    MOVEQ #2,D1
    
    MOVE.W #0,VDPDATA
    
.zun
    MOVE.B (A2)+,D2
    MOVE.W D2,(A3)
    
    DBRA D1,.zun   *йнмеж мнплюкэмни нрпхянбйх



    CMP.B #1,(A4) *япюбмхбюел гмювемхе б оепелеммни яв╗рвхйю бшдекемхъ
    BEQ .DRAWSTARTMENU      
    
    CMP.B #2,(A4)
    BEQ .DRAWCONTMENU
        
    CMP.B #3,(A4)
    BEQ .DRAWOPTIONMENU    
    
    CMP.B #4,(A4)
    BEQ .DRAWQUITMENU
    

.JOYCHECKTRAP *кнбсьйю дфниярхйю дкъ гюыхрш нр гюкхоюмхъ х нр дбнимнцн япюаюршбюмхъ
    JSR VBLANKEND     *  гюдепфйю
    JSR Player_ReadControlsDual *явхршбюел дфниярхй
    CMP.W #$FFFF,D0 *еякх ймнойх ме мюфюрш
    BEQ .EXIT       
                    *бшундхл х намнбкъеляъ
    
                    *еякх ймнойю мюфюрю
    MOVE.W D0,D5    *оепедю╗л мю бпелеммне упюмемхе б дпсцни пецхярп
    BNE .TRAP2      
                    *оепеундхл б рпюо2
    
.DOWN
    CMP.B #4,(A4) еякх б яв╗рвхйе 4 опносяйюел
    BEQ .UP           
    CMP.W #$FFFD,D5 еякх мюфюрн бмхг  /BNE еякх ме бмхг хд╗л дюкэье
    BNE .UP
    ADD.B #1,(A4)
.UP
    CMP.B #1,(A4) еякх б яв╗рвхйе 1 опносяйюел напюанрйс ймнойх ббепу
    BEQ .EXIT
    CMP.W #$FFFE,D5 еякх мюфюрн ббепу
    BNE .EXIT
    SUB.B #1,(A4) 
    
    
.EXIT
    JSR VBLANKSTART         *гюдепфйю
    CMP.B #4,(A4)           *еякх лемч мю верб╗прни онгхжхх
    BNE .ST
              
                            *еякх ме пюбмн бшундхл
    CMP.W #$FF7F,D5         *еякх лемч мю верб╗прни онгхжхх опнбепъел ймнойс ярюпр
    BEQ MONITOR
.ST    
    CMP.B #1,(A4)       *еякх лемч мю оепбни онгхжхх
    BNE .TEXTSTART
                        *еякх мер бшунд
    CMP.W #$FF7F,D5     *фд╗л ярюпр х оепеундхл
    BEQ .MENUCLEAR
                            *еякх мюфюрн оепеундхл
    jmp .TEXTSTART          
                            *еякх ме мюфюрн бшундхл
    
.TRAP2      *бяонлнцюрекэмши лндскэ кнбсьйх
    JSR VBLANKEND    
    JSR VBLANKSTART
    JSR Player_ReadControlsDual *явхршбюел дфниярхй
    CMP #$FFFF,D0
    BNE .TRAP2
    
    JMP .DOWN
    
.D2MIN
    SUBQ #1,D2
    JMP .L3

.D3PLU    
    ADDQ #1,D3
    JMP .L4
    
.D4MIN
    SUBQ #1,D4
    JMP .L6
.D5PLU
    ADDQ #1,D5
    JMP .L7
    
.DRAWSTARTMENU *бшдекемхе йспянпнл осмйрнб лемч
    MOVE.W #VRAMTILEMAPB+4896,D6 *гмювемхе START
    JSR PREPVRAM
    MOVE.W #$2200,D2
    MOVEQ #4,D0
    MOVE.L #MENUTEXT,A2
.T
    
    MOVE.B (A2)+,D2
    MOVE.W D2,(A3)
    DBRA D0,.T

    
    
    JMP .JOYCHECKTRAP
    
.DRAWCONTMENU
    MOVE.W #VRAMTILEMAPB+5152,D6
    JSR PREPVRAM
    MOVE.W #$2200,D2
    MOVEQ #7,D0    
    MOVE.L #MENUTEXT+5,A2
.T2
    MOVE.B (A2)+,D2
    MOVE.W D2,(A3)
    DBRA D0,.T  

    JMP .JOYCHECKTRAP
    
    
.DRAWOPTIONMENU
    MOVE.W #VRAMTILEMAPB+5408,D6
    JSR PREPVRAM
    MOVE.W #$2200,D2
    MOVEQ #5,D0    
    MOVE.L #MENUTEXT+13,A2
.T3
    MOVE.B (A2)+,D2
    MOVE.W D2,(A3)
    DBRA D0,.T  

    JMP .JOYCHECKTRAP
 
.DRAWQUITMENU
    MOVE.W #VRAMTILEMAPB+5664,D6
    JSR PREPVRAM
    MOVE.W #$2200,D2
    MOVEQ #3,D0    
    MOVE.L #MENUTEXT+19,A2
.T4
    MOVE.B (A2)+,D2
    MOVE.W D2,(A3)
    DBRA D0,.T  

    JMP .JOYCHECKTRAP       
    
    

.DMA
    move.w #$9300+(($BC>>1)&$FF),VDPCONTROL мхфмее якнбн дкхммш
    move.w #$9400+((($0300>>1)&$FF00)>>8),VDPCONTROL бепумее якнбн дкхммш
    move.w #$9500+(($00>>1)&$FF),VDPCONTROL мхфмхи юдпея хярнвмхйю
    move.w #$9600+((($A000>>1)&$FF00)>>8),VDPCONTROL япедмхи юдпея хярнвмхйю
    move.w #$9700+((($FF0000>>1)&$7F0000)>>16),VDPCONTROL бепумхи юдпея хярнвмхйю
    
    move.l #$40000080+(($DC00&$3FFF)<<16)+(($DC00&$C000)>>14),VDPCONTROL юдпея мюгмювемхъ+гюосяй DMA
    
    RTS
    
.MENUCLEAR *оняке мюфюрхъ ярюпр мю 1 осмйре лемч (вхярхл лемч х оюпюкекэмн врн мхасдэ пюяоюйнбшбюел)
    *НРКЮДНВМЮЪ ОЮКХРПЮ
    LEA .MENUCLEAR2,A6
    JMP GLOBALFADE

    
    
    
.MENUCLEAR2
    MOVE.W #$8F01,(VDPCONTROL) юбрнякнфемхе мю 1
    MOVE.W #$9300+(($005F>>1)&$FF),(VDPCONTROL)  ^мхфмее якнбн дкхммш $0xxx 1ff max
    MOVE.W #$9400+((($3400>>1)&$FF00)>>8),(VDPCONTROL) юдпеяю дкхммш DMA бепумее якнбн дкхммш $xx00
    
    MOVE.W #$9780,(VDPCONTROL) рхо DMA
    MOVE.L #$40000080+(($E000&$3FFF)<<16)+(($E000&$C000)>>14),(VDPCONTROL) юдпея мюгмювемхъ $C000&$3FFF) - ($D7FF&$C000)
    
    MOVE.W #$0000,(VDPDATA) гмювемхе дкъ гюонкмемхъ #$yy00
    JSR DMAWAIT *фд╗л DMA еякх ноепедхкх
    
    
    
    MOVE.W #$8F02,VDPCONTROL *бнгбпюыюел юбрнякнфемхе мю 2
    MOVE.W #$9001,VDPCONTROL *бнгбпюыюел пюглеп хцпнбнцн онкъ мю 32 бепрхйюкэмне х 64 цнпхгнмрюкэмне
    MOVE.W #$8230,VDPCONTROL *бнгбпюыюел рюиклюо ю мю C000
    
    JMP LEVEL0

      



LOADTORAMLEVEL0TILEMAP *гюцпсгйю рюикнб ащйцпюсмдю й 1 спнбмч б оюлърэ
; INPUT:
; 	d0	Starting pattern name (added to each 8x8 before writing to destination)
; 	a0	Source address
; 	a1	Destination address

   MOVEQ #1,D0
   MOVE.L #LEVEL0BTILEMAP,A0
   MOVE.L #$FFA000,A1

   JSR EniDec
    
    
    
    RTS   
FRAMECOUNT *ондяв╗р йюдпнб
    ADDQ #1,D7 
    CMP.B #50,D7
    BLT .L
    MOVEQ #0,D7
.L    
    RTS
    
 


MIKU						*напюанрйю яопюирю пелс
						*яРЕЙ лХМСЯ 64 гюмър дкъ ондйюрю
					
    LEA VDPCONTROL,A3   *юдпея йнмрпнкъ бхденвхою
	MOVE.L #$18040003,(A3) *сярюмнбйю юдпеяю яопюирнбни онгхжхх б бхденвхое дкъ времхъ (58040003 гюохяэ)
    LEA VDPDATA,A4      *юдпея дюммшу дкъ бхденвхою
    MOVE.L #$58040003,A6   *юдпея гюохях яопюирю
    MOVE.L #$FF9FFE,A5  *юдпея ткюцю яопюирю б RAM
	MOVE.L #$FF9FFD,A2  *юдпея янярнъмхъ ондйюрю
	*MOVE.L #$FF9FFC,A1  *юдпея янярнъмхъ опнйпсрйх цнуеъ б (ме сахпюрэ йнлемрш хмюве нрпхянбйю онкнлюеряъ)
    MOVE.L (A4),D1      *вхрюел онкнфемхе яопюирю хг бхденоюлърх
    MOVE.W D1,$FF9FE6   *гюохяэ онкнфемхъ яопюирю пеилс б оюлърэ дкъ дпсцху опнцпюлл
	
	CMP.B #0,$FF9FFA   *опнбепйю яюкэрн
	BNE .SALTO
	
	CMP.B #0,$FF9FFC	*опнбепйю бглюую цнуеел
	BNE .GOHEISWIPE
	
	
	CMP.B #0,(A2)   *опнбепъел опнхяундхр кх яеивюя ондйюр
	BLT	.SLIDEL
    BGT .SLIDER
	
    CMP.B #1,$FF9FFB	*опнбепъел ткюц сдепфюмхъ B дкъ цнуеъ
	BEQ	.GOHEIBUT
    

    CMP.W #$FFDB,D0		*опнбепъл янвхрюмхе ондйюрю бкебн
	BEQ .SLIDEL 
	CMP.W #$FFD7,D0
	BEQ .SLIDER
	
.SLIDEJUMP	
	CMP.W #$FFFF,D0     *опнбепъел еякх ймнойх ме мюфюрш
    BEQ .SPRITE1 			 *рн декюел нашвмши яопюир   
	
    BTST #2,D0     *опнбепъел бкебн
    BEQ .LEFT
    BTST #3,D0     *опнбепъел бопюбн
    BEQ .RIGHT
	
	
	CMP.B #1,$FF9FFB	*опнбепъел ткюц сдепфюмхъ B дкъ цнуеъ
	BEQ	.SPRITE1
	BTST #5,D0 		*опнбепъел ймнойс !B! нрдекэмн
	BEQ .GOHEISWIPE	
    JMP .SPRITE1

.GOHEIBUT				*тсмйжхъ дкъ яапняю ткюцю мюфюрхъ ймнойх
	BTST #5,D0 		*опнбепъел ймнойс !B! нрдекэмн
	BEQ .SLIDEJUMP
	MOVE.B #0,$FF9FFB	*намскъел ткюц еякх ймнойю нросыеммю
	JMP .SLIDEJUMP
	
.GOHEISWIPE				*тсмйжхъ бглюую цнуеел
	MOVE.B	$FF9FFC,D5	*оепемняхл дюммше хг оюлърх б пецхярп бпелеммши дкъ щйнмнлхх оюлърх
	ADDQ #2,D5			*днаюбкъел й яв╗рвхйс
	
	
						
	LEA MIKUTILE14,A0	*цпсгхл яопюир
	MOVE.B D5,$FF9FFC	*гюдбхцюел яв╗рвхй напюрмн б оюлърэ
	CMP.B #6,D5			*япюбмхбюел йюдпш
	BEQ .SPRITEDRAW		*пхясел яопюир
	LEA MIKUTILE15,A0
	CMP.B #12,D5
	BEQ .SPRITEDRAW	
	CMP.B #36,D5
	BEQ .SPRITEDRAW	
	LEA MIKUTILE16,A0
	CMP.B #18,D5
	BEQ .SPRITEDRAW
	CMP.B #42,D5
	BEQ .SPRITEDRAW		
	LEA MIKUTILE17,A0
	CMP.B #24,D5
	BEQ .SPRITEDRAW	
	CMP.B #48,D5
	BEQ .SPRITEDRAW	
	CMP.B #30,D5  
	BEQ .SPFLIP
	CMP.B #54,D5
	BEQ .GOHEICLEAR	
	
	
	
	RTS
.SALTOREPEAT *тсмйжхъ дкъ онбрнпю яюкэрн
	CMP.B #0,$FF9FF8	*япюбмхбюел йнкхвеярбн нярюбьхуяъ яюкэрн
	BLE	.SALTOB			*еякх йнмвхкхяэ рн бшопшцхбюел
	BTST.L #6,D0		*еякх мер рн опнбепъел я
	BEQ	.SALTORESET		*еякх мюфюрю яапюяшбюел х онбрнпъел яюкэрн
	JMP	.SALTOB			*еякх ме мюфюрю декюел еы╗ йпсц
.SALTOTRAP				*кнбсьйю дкъ гюыхрш нр гюфюрхъ ймнойх
	BTST.L #6,D0		
	BNE .SALTOB
	CLR.B $FF9FF8
	JMP .SALTOB
.SALTORESET				*яапня яюкэрн
	CLR.B $FF9FFA		*яапня янярнъмхъ яюкэрн
	SUB.B #1,$FF9FF8	*бшвхрюмхе йнкхвеярбю нярюбьхуяъ яюкэрн
.SALTO						*нямнбмни жхйк яюкэрн
	MOVE.L A6,(A3) 		*ондцнрнбйю й гюохях б бхденвхо 
	CLR.L D3			*вхярхл мю бяъйхи яксвюи пецхярп бпелеммнцн упюмемхъ
	MOVE.B	$FF9FFA,D5	*оепемняхл дюммше хг оюлърх б пецхярп бпелеммши дкъ щйнмнлхх оюлърх
	ADDQ #1,D5			*днаюбкъел й яв╗рвхйс
	MOVE.B #6,D4		*гюмхлюел пецхярп дкъ щйнмнлхх оюлърх
	
	
	MOVE.B $FF9FF7,D3		*оепелеыюел дюммше дкъ дбхфемхъ
	BTST.L #27,D1		*опнбепъел йсдю онб╗пмср яопюир
	BEQ	.LEFTSA
.RIGHTSA	
	CMP.W #$01A7,D1         *опнбепъел ме со╗пкхяэ кх б йпюи щйпюмю
    BGT .SALTOJUMP
	ADD.W D3,D1              *бшвхрюел гмювемхе дбхфемхъ
	JMP .SALTOJUMP
.LEFTSA	
	CMP.W #$0079,D1         *опнбепъел ме со╗пкхяэ кх б йпюи щйпюмю
    BLE .SALTOJUMP
	SUB.W D3,D1              *бшвхрюел гмювемхе дбхфемхъ

.SALTOJUMP	
	LEA MIKUTILE9,A0	*цпсгхл яопюир
	MOVE.L D1,(A4)		*нропюбкъел дбхфемхе яопюирю б бхденвхо
	MOVE.B D5,$FF9FFA	*гюдбхцюел яв╗рвхй напюрмн б оюлърэ
	CMP.B D4,D5			*япюбмхбюел йюдпш
	BEQ .SPRITEDRAW		*пхясел яопюир
	ADDQ #6,D4			*днаюбкъел дн якедсчыеи опнбепйх
	
	
	LEA MIKUTILE10,A0	*цпсгхл яопюир
	CMP.B D4,D5			*япюбмхбюел йюдпш
	BEQ .SPRITEDRAW		*пхясел яопюир
	
	CMP.B #20,D5
	BEQ .SALTOTRAP
	
	ADDQ #6,D4
	LEA MIKUTILE11,A0	*цпсгхл яопюир
	CMP.B D4,D5			*япюбмхбюел йюдпш
	BEQ .SPRITEDRAW		*пхясел яопюир
	ADDQ #6,D4
	LEA MIKUTILE12,A0	*цпсгхл яопюир
	CMP.B D4,D5		    *япюбмхбюел йюдпш
	BEQ .SPRITEDRAW		*пхясел яопюир
	ADDQ #6,D4
	LEA MIKUTILE13,A0	*цпсгхл яопюир
	
	CMP.B D4,D5			*япюбмхбюел йюдпш
	BEQ .SPRITEDRAW		*пхясел яопюир
	CMP.B #20,D5
	BEQ .SALTOTRAP
	CMP.B #29,D5
	BGT	.SALTOREPEAT	
		
.SALTOB				*тсмйжхъ дкъ оепеяйнйю
	ADD.B #9,D4
	CMP.B D4,D5
	BEQ .GOHEICLEAR
	
	RTS
.GOHEICLEAR				*вхярйю цнуеъ
	CLR.B (A5)			*нрвхярхл ткюц яопюирю врна оепбши пюг намнбхкяъ опюбхкэмн яопюир
	CLR.B $FF9FFC		*яапняхл цнуеи
	MOVE.B #1,$FF9FFB	*гюмняхл ткюц сдепфюмхъ ймнойх
	CLR.B $FF9FFA		*вхярйю яюкэрн
	CLR.B $FF9FF7		*вхярйю дбхфемхъ б яюкэрн
	SUB.L #64,A7			*нябнанфдюел леярн б ярейе
	MOVE.W #0,(A7)
	ADD.L #64,A7
	CLR.B (A2)			*вхярйю ондйюрю
	CLR.B $FF9FF9		*вхярйю рюилхмцю яюкэрн
	JMP .SPRITE1		*нрпхясел ярнъвхи яопюир

.SPFLIP						*тсмйжхъ дкъ нрпюфемхъ яопюирю пюанрюер я цнуеел
	MOVE.L A6,(A3)          *бшярюбкъел нвепед мю гюохяэ б бхденвхо юрпхасрш яопюирю 
	BCHG #27,D1             *пюгбнпювхбюел яопюир
	LEA	MIKUTILE14,A0 		*цпсгхл якедсчыхи яопюир врн аш ме репърэ яхмупнмхгюжхч
	MOVE.L D1,(A4)          *оепемняхл юрпхасрш яопюирю б бхденвхо (ЦПЮМХЖЮ КЕБЮЪ 0079)
	JMP .SPRITEDRAW	
.SLIDER				*ондйюр бопюбн хяонкэгсел ндхмюйнбше ткюцх 
	MOVE.L A6,(A3)          *бшярюбкъел нвепед мю гюохяэ б бхденвхо юрпхасрш яопюирю 
	ADD.B #1,(A2)		*опхаюбкъел янярнъмхе ондйюрю

	CMP.B #$B,(A2)		*рюилхмц дкъ яюкэрн
	BLT .SALTOPREP		*опнбепъел бпелъ ондйюрю х ймнойх яннрберярбеммн
						*еякх врн рн он бпелемх ме янбоюдюер акнйхпсел ондйюр жекхйнл
	CMP.B #$10,(A2)
	BLT .SALTOPREP2
.SRSKIP	
	CMP.B #$12,(A2)    	*опнбепъел ме гюйнмвхкняэ кх наыее бпелъ ондйюрю
	BGT .SLIDECLEAR		*еякх гюйнмвхкняэ  оепегюцпсфюел яхярелс ондйюрю
	CMP.B #$10,(A2)		*опнбепъел гюйнмвхкняэ кх бпелъ нямнбмнцн ондйюрю
	BGT .SLIDEJUMP      *бшопшцхбюел мюгюд еякх гюйнмвхкняэ
	
	CMP.W #$01A7,D1         *опнбепъел ме со╗пкхяэ кх б йпюи щйпюмю
    BGT .SRS
	ADDQ #4,D1              *бшвхрюел гмювемхе дбхфемхъ	
.SRS	
	BSET #27,D1             *пюгбнпювхбюел яопюир
	SUB.L #64,A7			*нябнанфдюел леярн б ярейе
	MOVE.L D1,(A4)          *оепемняхл юрпхасрш яопюирю б бхденвхо (ЦПЮМХЖЮ КЕБЮЪ 0079)
	CMP.B #13,(A7)			*япюбмхбюел мнлеп гюыы╗кйс дкъ ондйюрю я мнцни
	BEQ .SLIDEUPFOOT
	
	BTST #5,D0             *опнбепъел мюфхлюмхе ймнойх B
							*еякх ме мюфюрю SK
	BNE .SK
	CMP.B #11,(A7)			*япюбмхбюел оепбнмювюкэмсч гюы╗кйс
	BEQ .SLIDEUPR		*еякх нмю еярэ гюдхпюел мнцс
	ADD.L #64,A7			*еякх мерс рн бнгбпюыюел ярей мю леярн
	
	JMP .OPTSL
.SALTOPREP				*оепбхвмюъ опнбепйю ондйюрю
	BTST.L #6,D0		*опнбепйю ймнойх мю мюфюрхе
	SEQ.B $FF9FF9		*еякх мюфюрю акнйхпсел дюкэмеиьхи ондйюр (хкх яапюяшбюел кнфмши ткюц)
	BEQ .JUMPCHECK			*еякх мюфюрю рн хд╗р дюкэье он опнбепйюл
	
	MOVE.B #8,$FF9FF9	*еякх ймнойю ме мюфюрю гюйхдшбюел ткюц дкъ брнпхвмни опнбепйх
	JMP .JUMPCHECK			*хд╗л дюкэье

.SALTOMOVE
	MOVE.B #2,$FF9FF7	*яйнпнярэ дбхфемхъ б яюкэрн
	JMP .SALTOPREPP
.SALTOPREP2				*брнпхвмюъ опнбепйю рюилхмцю ондйюрю
	CMP.B #8,$FF9FF9	*опнбепйю оепбхвмнцн ткюцю
	BNE .JUMPCHECK			*еякх ткюц ме янбоюдюер хд╗л дюкэье он ондйюрс
	MOVE.B #2,$FF9FF8	*гюмняхл 2 ондйюрю гюпюмее
	BTST.L #2,D0		*опнбепйю мюопюбкемхи дкъ дбхфемхъ б яюкэрн
	BEQ .SALTOMOVE
	BTST.L #3,D0
	BEQ .SALTOMOVE
.SALTOPREPP	
	BTST.L #6,D0		*еякх ткюц янбоюк опнбепъел ймнойс
	BEQ .SALTO			*еякх ймнойю янбоюкю декюел яюкэрн
	JMP .JUMPCHECK			*еякх ймнойю ме янбоюкю хд╗л дюкэье
	
.JUMPCHECK			*тсмйжхъ дкъ опюбхкэмнцн бшопшцхбюмхъ
	CMP.B #$0,(A2)	*опнбепъел б йюйсч ярнпнмс ондйюр
	BGT	.SRSKIP		*еякх анкэье 0 опнднкфюел опюбши ондйюр
	BLT	.SLNE		*еякх лемэье 0 опнднкфюел кебши ондйюр
.SLIDEL				*ондйюр бкебн  ткюц яопюирю 20 х 21 23
	MOVE.L A6,(A3)          *бшярюбкъел нвепед мю гюохяэ б бхденвхо юрпхасрш яопюирю 
	
	SUB.B #1,(A2)		*нрмхлюел янярнъмхе ондйюрю
	
	CMP.B #$F5,(A2)		*рюилхмц дкъ яюкэрн
	BGT .SALTOPREP		*опнбепъел бпелъ ондйюрю х ймнойх яннрберярбеммн
						*еякх врн рн он бпелемх ме янбоюдюер акнйхпсел ондйюр жекхйнл
	CMP.B #$F0,(A2)
	BGT .SALTOPREP2
	
.SLNE
	CMP.B #$EE,(A2)    	*опнбепъел ме гюйнмвхкняэ кх наыее бпелъ ондйюрю
	BLT .SLIDECLEAR		*еякх гюйнмвхкняэ  оепегюцпсфюел яхярелс ондйюрю
	CMP.B #$F0,(A2)		*опнбепъел гюйнмвхкняэ кх бпелъ нямнбмнцн ондйюрю
	BLT .SLIDEJUMP      *бшопшцхбюел мюгюд еякх гюйнмвхкняэ
	
	CMP.W #$0079,D1         *опнбепъел ме со╗пкхяэ кх б йпюи щйпюмю
    BLE .SLS
	SUBQ #4,D1              *бшвхрюел гмювемхе дбхфемхъ
	
.SLS		
	BCLR #27,D1             *пюгбнпювхбюел яопюир
	MOVE.L D1,(A4)          *оепемняхл юрпхасрш яопюирю б бхденвхо (ЦПЮМХЖЮ КЕБЮЪ 0079)
.STSLIDE	
	SUB.L #64,A7			*нябнанфдюел леярн б ярейе
	
	CMP.B #13,(A7)			*япюбмхбюел мнлеп гюыы╗кйс дкъ ондйюрю я мнцни
	BEQ .SLIDEUPFOOT
	
	BTST #5,D0             *опнбепъел мюфхлюмхе ймнойх B
							*еякх ме мюфюрю SK
	BNE .SK
	CMP.B #11,(A7)			*япюбмхбюел оепбнмювюкэмсч гюы╗кйс
	BEQ .SLIDEUPPREP		*еякх нмю еярэ гюдхпюел мнцс
.NZ	
	ADD.L #64,A7			*еякх мерс рн бнгбпюыюел ярей мю леярн
	JMP .OPTSL				*хд╗л дюкэье он ябнхл декюл
.SK							*тсмйжхъ дкъ нпцюмхгюжхх гюы╗кйх
	MOVE.B #11,(A7)			*сярюмюбкхбюел ткюц б ярей
	
	JMP .NZ					*декюел онксйпсц дкъ бняярюмнбкемхъ ярейю

.OPTSL
	
	
	BTST #2,D7              *опнбепъл йюйни яеивюя йюдп
	BEQ .SLIDEL2
	
	CMP.B #20,(A5)           *опнбепъел ткюц яопюирю
    BEQ .RETURN 

    MOVE.B #20,(A5)         *сярюмюбкхбюел ткюц яопюирю
	
	LEA MIKUTILE6,A0		*гюцпсгйю яопюирю ондйюрю бкебн
	
	JMP .SPRITEDRAW

.SLIDEL2  	*брнпни бюпхюмр яйнкэфемхъ
	
	CMP.B #21,(A5)           *опнбепъел ткюц яопюирю
    BEQ .RETURN 

    MOVE.B #21,(A5)         *сярюмюбкхбюел ткюц яопюирю
	
	LEA MIKUTILE7,A0
	JMP .SPRITEDRAW
.SLIDEUPPREP					*днаюбкъел бпелъ ондйюрю я мнцни
	CLR.B $FF9FF7	*сдюкъел якедш опедбюпхрекэмшу бшвхякемхи дбхфемхъ я опнькнцн ондйюрю
	MOVE.B #$FF,(A2)
	BRA .SLIDEUPFOOT
.SLIDEUPR			*днаюбйю ондйюрю дкъ бопюбн
	CLR.B $FF9FF7	*сдюкъел якедш опедбюпхрекэмшу бшвхякемхи дбхфемхъ я опнькнцн ондйюрю
	MOVE.B #$1,(A2)
		
.SLIDEUPFOOT
	MOVE.B #13,(A7)		*дбхцюел онкмсч гюы╗кйс б ярей
    SWAP D7
    BSET #0,D7
    SWAP D7
	ADD.L #64,A7		*бнгбпюыюел ярей мю леярн
*	BTST.L #6,D0			*опнбепъел мюфюрхе C х цнрнбхляъ й яюкэрн
*	BEQ	.SALTO
	CMP.B #23,(A5)		*пюанрюел я ткюцнл яопюирю мнцх
	BEQ .RETURN
	
	MOVE.B #23,(A5)
	
	
		
	LEA MIKUTILE8,A0
	JMP .SPRITEDRAW
	
	
.SLIDECLEAR				*тсмйжхъ дкъ оепегюцпсгйх ондйюрю 
	SUB.L #64,A7			*нябнанфдюел леярн б ярейе
	MOVE.W #0,(A7)
	ADD.L #64,A7
	MOVE.B #0,(A2)		*вхярхл ъвеийс ондйюрю б RAM 
	CLR.B $FF9FF9		*вхярйю ъвеийх дкъ рюилхмцю ондйюрю
	JMP .SLIDEJUMP		*бшопшцхбюел мюгюд х опнбепъел сопюбкемхе

.RIGHT   				*бопюбн ткюц яопюирю 22 х 33
	MOVE.L A6,(A3)          *бшярюбкъел нвепед мю гюохяэ б бхденвхо юрпхасрш яопюирю      
    CMP.W #$01A7,D1         *опнбепъел ме со╗пкхяэ кх б йпюи щйпюмю
    BGE .SR
                      
    ADDQ #2,D1              *бшвхрюел гмювемхе дбхфемхъ  
.SR    
    BSET #27,D1             *оепебнпювхбюел яопюир
        
    MOVE.L D1,(A4)          *оепемняхл юрпхасрш яопюирю б бхденвхо (ЦПЮМХЖЮ ОПЮБЮЪ 01A7)
    
    
    BTST #3,D7              *опнбепъл йюйни яеивюя йюдп
    BEQ .RIGHTSP2
    
    CMP.B #22,(A5)           *опнбепъел ткюц яопюирю
    BEQ .RETURN 

    MOVE.B #22,(A5)         *сярюмюбкхбюел ткюц яопюирю
    LEA MIKUTILE2,A0
    JMP .SPRITEDRAW

.RIGHTSP2
    CMP.B #33,(A5)           *опнбепъел ткюц яопюирю
    BEQ .RETURN 
    
    MOVE.B #33,(A5)         *ярюбхл ткюц
    LEA MIKUTILE3,A0
    JMP .SPRITEDRAW
    
                        
.LEFT			*ткюц яопюирю 2 х 3
   * CMP.B #2,(A5)
   * BEQ .RETURN
    MOVE.L A6,(A3)          *бшярюбкъел нвепед мю гюохяэ б бхденвхо юрпхасрш яопюирю      
    
    CMP.W #$0079,D1         *опнбепъел ме со╗пкхяэ кх б йпюи щйпюмю
    BLE .LS
    
	SUBQ #2,D1              *бшвхрюел гмювемхе дбхфемхъ                         	
                      
    
.LS    
    BCLR #27,D1             *пюгбнпювхбюел яопюир
    
    MOVE.L D1,(A4)          *оепемняхл юрпхасрш яопюирю б бхденвхо (ЦПЮМХЖЮ КЕБЮЪ 0079)
    BTST #3,D7              *опнбепъл йюйни яеивюя йюдп
    BEQ .LEFTSP2
                            *декхл опхлепмн мю 4 бпелъ х бшахпюел пюгмши мюанп яопюирю
    CMP.B #2,(A5)           *опнбепъел ткюц яопюирю
    BEQ .RETURN 
                            *еякх яопюир рнр фе яюлши ме оепепхянбшбюел
    LEA MIKUTILE2,A0        *гюцпсфюел юдпея яопюирю
    MOVE.B #2,(A5)          *бшярюбкъел ткюц яопюирю
    
    JMP .SPRITEDRAW         
                            *опшфнй мю пюяоюйнбйс яопюирю
.LEFTSP2                *2ъ бюпхюжхъ аецю бкебн
    CMP.B #3,(A5)
    BEQ .RETURN
       
    LEA MIKUTILE3,A0        *гюцпсфюел юдпея яопюирю
    MOVE.B #3,(A5)          *бшярюбкъел ткюц яопюирю
    
    JMP .SPRITEDRAW         
                            *опшфнй мю пюяоюйнбйс яопюирю
                    
                            
.SPRITE1                *нашвмши яопюир
    CMP.B #1,(A5)       *япюбмхбюел ткюц яопюирю
    BEQ .RETURN
                        *еякх рюйни яопюир сфе бшбндхкх рн ме оепепхянбшбюел  
    LEA MIKUTILE1,A0    *гюмняхл юдпея нашвмнцн яопюирю
    MOVE.B #1,(A5)      *гюмняхл ткюц яопюирю
   
.SPRITEDRAW *оепед щрхл гюмеярх юдпея яопюирю б ю0
    MOVE.L #$FFA000,A1  *гюцпсгйю юдпеяю бпелеммни пюяоюйнбйх б RAM   
    MOVE.L A1,A2        *йнохпнбюмхе юдпеяю оюлърх
    
    JSR Kos_Decomp      *пюяоюйнбйю яопюирю б RAM
    MOVE.L #$70000002,(A3) *гюцпсгйю юдпеяю яопюирю б йнмрпнкэмши пецхярп бхденвхою
.L
    MOVE.L (A2)+,(A4)       * йнохпнбюмхе яопюирю хг RAM б бхденвхо
    
    CMP.L A2,A1
    BNE .L
    
    
.RETURN   
   RTS 
     
   *яфюрше яопюирш KOS
MIKUTILE1 INCBIN "tilemap\res\mikutiles1.bin"  *нАШВМШИ ЯОПЮИР
MIKUTILE2 INCBIN "tilemap\res\mikutiles2.bin"  *аЕЦ БКЕБН 1

MIKUTILE3 INCBIN "tilemap\res\mikutiles3.bin"  *аЕЦ БКЕБН 2
MIKUTILE4 INCBIN "tilemap\res\mikutiles4.bin"  *бШЯРПЕК
MIKUTILE5 INCBIN "tilemap\res\mikutiles5.bin"  *яЛЕПР

MIKUTILE6 INCBIN "tilemap\res\mikutiles6.bin"  *оНДЙЮР БКЕБН 1 
MIKUTILE7 INCBIN "tilemap\res\mikutiles7.bin"  *оНДЙЮР БКЕБН 2
MIKUTILE8 INCBIN "tilemap\res\mikutiles8.bin"  *оНДЙЮР БКЕБН Я ОНДМЪРНИ МНЦНИ

MIKUTILE9 INCBIN "tilemap\res\mikutiles9.bin"   *оЕПБШИ ЙЮДП ЯЮКЭРН
MIKUTILE10 INCBIN "tilemap\res\mikutiles10.bin" *бРНПНИ ЙЮДП ЯЮКЭРН
MIKUTILE11 INCBIN "tilemap\res\mikutiles11.bin" *рПЕРХИ ЙЮДП ЯЮКЭРН

MIKUTILE12 INCBIN "tilemap\res\mikutiles12.bin" *вЕРБ╦ПРШИ ЙЮДП ЯЮКЭРН
MIKUTILE13 INCBIN "tilemap\res\mikutiles13.bin" *оНЯКЕДМХИ ЙЮДП ЯЮКЭРН ОПХГЕЛКЕМХЕ
MIKUTILE14 INCBIN "tilemap\res\mikutiles14.bin" *оЕПБШИ ЙЮДП БГЛЮУЮ

MIKUTILE15 INCBIN "tilemap\res\mikutiles15.bin" *бРНПНИ ЙЮДП БГЛЮУЮ
MIKUTILE16 INCBIN "tilemap\res\mikutiles16.bin" *рПЕРХИ ЙЮДП БГЛЮУЮ
MIKUTILE17 INCBIN "tilemap\res\mikutiles17.bin" *оНЯКЕДМХИ ЙЮДП БГЛЮУЮ

BALLSP INCBIN	"tilemap\res\BALLSP.bin" 	*яопюир ьюпнб   

MIKUSETUP   

	MOVE.L #VDPCONTROL,A4
	MOVE.L #VDPDATA,A3
	MOVE.L #RAM+66,A0	
    MOVE.L #$0EEE0888,(A0)+  (оюкхрпю MIKU)
    MOVE.L #$000E0008,(A0)+
    MOVE.L #$0CAA08EE,(A0)  ***

    MOVE.L #$58000003,(A4) *сярюмюбкхбюел юдпея пеилс б яопюирнбни рюакхже бхденвхою
    
    MOVE.L #$01500F01,(A3) (мювюкэмши юрпхаср яопюирю)
    MOVE.L #$45800110,(A3) *пеилс
	LEA MIKUTILE1,A0    *гюмняхл юдпея нашвмнцн яопюирю
     
		*оепед щрхл гюмеярх юдпея яопюирю б ю0
    MOVE.L #$FFA000,A1  *гюцпсгйю юдпеяю бпелеммни пюяоюйнбйх б RAM   
    MOVE.L A1,A2        *йнохпнбюмхе юдпеяю оюлърх
    
    BSR Kos_Decomp      *пюяоюйнбйю яопюирю б RAM
    MOVE.L #$70000002,(A4) *гюцпсгйю юдпеяю яопюирю б йнмрпнкэмши пецхярп бхденвхою
.L
    MOVE.L (A2)+,(A3)       * йнохпнбюмхе яопюирю хг RAM б бхденвхо
    
    CMP.L A2,A1
    BNE .L
   

BALLINIT	*ясапсрхмю дкъ гюцпсгйх ьюпнб				дюрю 29.08.2022
	MOVE.L #$58080003,(A4) *юдпея дкъ гюохях яопюирю б рюакхжс
    MOVE.L #$FF9FEE,A5       *гюмърш юдпеяю FF9FEE>FF9FF6 онд рюакхжс яопюирнб

    MOVE.W #$00D0,(A5)+     *юдпеяю дкъ онкнфемхъ ьюпю Y  D0
    MOVE.W #$0502,(A5)+       *кхмй х пюглеп яопюирю
    MOVE.W #$C590,(A5)+      *юдпея дкъ пюгбнпнрю яопюирю 4
    MOVE.W #$0180,(A5)     *юдпеяю дкъ онкнфемхъ ьюпю X  180 (1B0 опюбши йпюи) (80КЕБШИ ЙПЮИ)
    
	SUBQ #6,A5

	MOVE.L (A5)+,(A3)
	MOVE.L (A5),(A3) *мювюкэмше оюпюлерпш ьюпю
	
	LEA BALLSP,A0		*гюдбхцюел юдпея рюикнб
	MOVE.L #$70000003,(A4)	*гюдбхцюел юдпея нймю VDP врна рюл упюмхрэ пюяоюйнбюммше рюикш ьюпнб
	BSR.W Nem_Decomp		*пюяоюйнбйю 
 	
	MOVE.W #$8F01,(A4)	*юбрнякнфемхе       *DMA ДКЪ МЮВЮКЭМНЦН ГЮОНКМЕМХЪ ЯОПЮИРНБНИ РЮАКХЖШ ЬЮПЮ
	MOVE.W #$9380,(A4)	*дкхммю
	MOVE.W #$9400,(A4)
	
	MOVE.W #$9500,(A4)	*юдпея хярнвмхйю
	MOVE.W #$96F0,(A4)
	MOVE.W #$97C0,(A4)	*рхо ноепюжхх
    CLR.W $FF9FEC   *НРВХЯРЙЮ ДКЪ цпюбхрюжхх ьюпю
    CLR.W $FF9FEA   *НРВХЯРЙЮ СЯЙНПЕМХЪ ЯБНАНДМНЦН ОЮДЕМХЪ Х ОНДЗ╦ЛЮ
    CLR.W $FF9FE8   *нрвхярйю ьюпю он цнпхгнмрюкх
    *CLR.B $
	
	MOVE.L #$720000C2,(A4)	*юдпея бшундмни+ярюпр
	
	
	
	MOVE.B #$F0,$FF9FE8 *мювюкэмши гюосяй ьюпю дкъ деаюцю
	*JMP STOP
	RTS
BALLMATH            *напюанрйю дбхфемхъ ьюпю 
    MOVE.L #$FF9FE9,A5 *юдпея дкъ мюопюбкемхъ дбхфемхъ ьюпю он цнпхгнмрюкх
    MOVE.L #$FF9FE8,A6 *юдпея дкъ сяйнпемхъ дбхфемхъ он цнпхгнмрюкх
    JSR .ballrotate    *напюанрйю бпюыемхъ ьюпю
    MOVE.L #$FF9FEE,A0 *юдпея ьюпю Y бепрхйюкэмши 
    MOVE.L #$FF9FEC,A1 *ъвеийю дкъ бепумеи рнвйх цпюбхрюжхх
    MOVE.L #$FF9FEB,A2 *ъвеийю дкъ сяйнпемхъ ябнандмнцн оюдемхъ  
    MOVE.L #$FF9FEA,A3 *ъвеийю дкъ сяйнпемхъ ондз╗лю ьюпю
    MOVE.L #$FF9FF4,A4 *юдпея ьюпю X цнпхгнмрюкэмши

    

   * CMP.B #0,$FF9FE5   *опнбепъел еярэ кх ткюц врн лъв ярнкймскяъ     
   * BNE .ADDBALL

    CMP.W #$0132,(A0)    *опнбепъел мюундхряъ кх ьюп б гнме (онремжхюкэмнцн оноюдюмхъ пелс...(дкъ щйнмнлхх опнжеяянпмнцн бпелемх))      (дюрю 28 нйр 2022)
    BGE .BALLVSREMUHITBOX
    *BRA .BALLNEXT                            *бшвхякемхъ ьюпю он цнпхгнмрюкх
*.ADDBALL                *реярхпсел рюилеп йюдпнб еякх рюилеп осярни нрвхыюел ткюц еякх рюилеп явхрюер опносяйюел
 *   CMP.B #0,D7
  *  BNE .BALLNEXT
  *  CLR.B $FF9FE5 

.BALLNEXT
    MOVE.W (A4),D1     *гюпюмее опетев дюммшу дкъ цнпхгнмрюкх
    CLR.L D0
    CMP.W #$0080,D1     *опнбепъел йнямскяъ хкх бшьек кх гю опедекш ьюп
    BLE .HORPL
    CMP.W #$01B0,D1
    BGE .HORPL
    
    BRA.B .HORIZONTAL   *еякх ме бшьек мювхмюел цнпхгнмрюкэмсч напюанрйс
.HORPL
    BCHG #0,(A5)        *еякх бшьек хглемъел мюопюбкемхе дбхфемхъ х мювхмюел цнпхгнмрюкэмсч напюанрйс (дюрю 5 нйръапъ 2022)
    ADD.B #5,(A6)       *опеднрбпюыемхе гюкхоюмхъ яйпюч щйпюмю

.HORIZONTAL
    MOVE.B (A6),D0      *опнбепъел мюдн кх декюрэ бшвхякемхъ дкъ дбхфемхъ он цнпхгнмрюкх +опедгюцпсфюел дюммше еякх онрпеасеряъ
    BEQ .VERT           *еякх ме рпеасеряъ мювхмюел бшвхякемхъ он бепрхйюкх

    CMP.B #$30,D0       *опнбепъел яйнпнярэ
    BLO .HSKIP          *еякх днярхцкх люкнцн спнбмъ яйнпнярх оепеярю╗р деиярбнбюрэ цпюбхрюжхъ
    SUBQ #1,D0          *нрмхлюел сяйнпемхе йюй хяйсярбеммюъ цпюбхрюжхъ
.HSKIP  
    MOVE.B D0,(A6)      *гюдбхцюел рн врн нрмъкх напюрмн б оюлърэ дкъ якедсчыецн йюдпю
    LSR.B #4,D0         *ядбхцюел дкъ окюбмнцн рнплнфемхъ
    BTST.B #0,(A5)      *опнбепъел б йюйсч ярнпнмс дбхферяъ ьюп
    BNE .HPLUS          *бшахпюел мюопюбкемхе

    SUB.W D0,(A4)       *бшвхрюел дбхцюеляъ бкебн
    BRA.B .VERT         *сундхл мю бепрхйюкэмсч напюанрйс
.HPLUS    
    ADD.W D0,(A4)       *еякх ахр хглемхкяъ опхаюбкъел дбхцюел ьюп бопюбн

.VERT                   *бшвхякемхъ он бепрхйюкх
    MOVE.W (A0),D0      *бшвхякъел онкнфемхе он бшянре
    MOVE.W #$015E,D1    *опнбепйю ме скерекх кх лш яйбнгэ онк
    CMP.W D1,D0         
    BGT .POL            *еякх бшкерекх явхрюел онк
    SUB.W D0,D1         *б D1 кефхр бшянрю ьюпю б дюммши лнлемр (бшвхякемхе бшянрш ьюпю)

    
    
    CMP.W (A1),D1       *япюбмхбюел блр ьюпю я рел врн еярэ яеивюя
    BLT .GS             *еякх ьюп мхфе блр рн опносяйюел
    MOVE.W D1,(A1)      *еякх ьюп бшье блр рн гюохяшбюел мнбсч блр

    
.GS 
    CLR.L D2            *нрвхярйю пецхярпнб
    CLR.L D3           
    ADD.B #1,(A2)       *днаюбкъел сяйнпемхъ ябнандмнцн оюдемхъ врн аш оепеяхкхрэ яхкс сяйнпемхъ б 2 пюгю

    BTST #2,D7          *опнбепйю яв╗рвхйю йюдпнб
    BEQ .GS2            *еякх оноюкх опшфнй
    ADD.B #1,(A2)       *еякх ме оноюкх днаюбкъел сяйнпемхъ оюдемхъ

   * MOVE.W #$BA,D1
   * CMP.W (A1),D1
   * BGT .GS
   * CLR.W (A1)

.GS2
    MOVE.B (A2),D2      *гюцпсфюел ябнандмне оюдемхе х ондз╗л ьюпю
    MOVE.B (A3),D3
    TST.B D3            *опнбепъел D3 ме гюйнмвхкняэ кх сяйнпемхе
    BEQ .S1             *еякх гюйнмвхкняэ опносяйюел
    SUBQ #1,D3          *еякх еы╗ еярэ нрмхлюел 
    CMP.W #$DC,D1       *опнбепъел бшянрс ьюпю
    BGT .S2           *еякх сдюпхкхяэ на онрнкнй

 *   CMP.W #$5A,D1       *опнбепъел бшянрс ьюпю
 *   BLT .S1             
 *   SUBQ #1,D3       *еякх опхбшяхкх бшянрс рн ямхфюел сяйнпемхе ббепу
    BRA .S1
    
.S2             *нрвхярйю б яксвюе еякх лш сдюпхкхяэ на онрнкнй
    CLR.W (A1)
    CLR.B (A3)
    RTS

.S1
    MOVE.B D3,(A3)      *гюохяшбюел мнбне сяйнпемхе кхан 0
    LSR.B #3,D2         *дбхцюел пецхярпш мю 3
    LSR.B #3,D3
    ADD.W D2,(A0)       *днаюбкъел ябнандмнцн оюдемхъ 

    SUB.W D3,(A0)       *бшвхрюел сяйнпемхе  гюйнмвхкюяэ напюанрйю ьюпю он бшянре

    
   
.SKIP   
    RTS
.SKIPBALLFIX        *опносяй декемхъ х тхйяюжхъ лъвю
    CLR.B (A3)      *хяопюбкемхе аюцю я опхкхоючыхл ьюпнл
    MOVE.W #$0160,(A0)
    
    RTS

.POL        *напюанрйю йюяюмхъ на онк
    CMP.W #0,(A1)      *реярхпсел мю ясыеярбнбюмхе блр х асдер кх щмепцхъ нр оюдемхъ
    BEQ .SKIPBALLFIX    *еякх мерс блр декюел пелнмр онкнфемхъ х опносяйюел декемхе
    CLR.L D0        *вхярхл пецхярп врн аш якедсчыее декемхе опнькн сяоеьмн
    MOVE.W (A1),D0  *гюцпсфюел бепумчч рнвйс ьюпю
     
    LSR.W #1,D0    *декхл бепумчч рнвйс мю 2 
    CMP.W #$50,D0    *опнбепйю ме опебшяхкх лш бепумчч рнвйс   C0
    BGT .POL2          *еякх опхбшяхкх япегюел дн аегноюярмнцн янярнъмхъ
.POL3 
    CLR.B (A2)      *намскъел сяйнпемхе ябнандмнцн оюдемхъ
    SUBQ #2,D0
    MOVE.B D0,(A3)  *сяйнпемхе ондз╗лю йнрнпне онксвхкх опх декемхх блр
    LSR.B #2,D0     *ядбхцюел D0
    SUB.W D0,(A0)   *х днаюбкъел ьюпс врна ме опносяйюрэ кхьмхи йюдп
    CLR.W (A1)      *вхярхл бепумчч рнвйс цпюбхрюжхх 


    RTS
.POL2               *япегюмхе блр дн аегноюярмни
    MOVE.W #$49,D0      *BA
    BRA .POL3

.BALLVSREMUHITBOX
    MOVE.W $FF9FE6,D0       *гюцпсгйю онкнфемхъ  цнпхгнмрюкх пелс (он бепрхйюкх ярюрхвмне #$0150)
    MOVE.W #$0160,D1        *гюцпсгйю онярнъммни бепрхйюкх пелс (дкъ япюбмемхи) 160 дКЪ СЙЮГЮМХЪ МЮ МХФМЧЧ ВЮЯРЭ ЯОПЮИРЮ 5 Nov 2022
    MOVE.W (A4),D2          *гюцпсгйю ьюпю цнпхгнмрюкэмюъ
    MOVE.W (A0),D3          *гюцпсгйю ьюпю бепрхйюкэмюъ

    SUB.W #7,D2             *бшвхрюел хг яопюирю ьюпю дкъ анкее рнвмни ондцнмйх он жемрпс пеилс
    *бепрхйюкэмюъ опнбепйю ьюпю мюд пеилс
    SUB.W #15,D1            *бшвхрюел охйяекх врна мюирх бепумчч рнвйс яопюире пелс
    ADD.W #8,D3            *опхаюбкъел охйяекх дкъ мхфмеи рнвйх ьюпю

    CMP.W D1,D3             *япюбмхбюел ьюп он бепрхйюкх (днярхцкх кх лш яопюирю пеилс)
    BLT .BALLNEXT           *еякх ме днярхцкх бшопшцхбюел мюгюд (щйнмнлхр оюпс жхйкнб)
    
    SUB.W #10,D2            *бшвхякъел йпюи ьюпю кебши
    ADD.W #8,D0             *бшвхякъел йпюи пелс опюбши
    CMP.W D0,D2             *опнбепъел врн ьюп дюкэье вел йпюи пеилс
    BGT .BALLNEXT           *еякх дюкэье бнгбпюыюел напюанрйс ьюпю дюкэье
                            *еякх лемэье опнбепъел дпсцсч ярнпнмс
    ADD.W #20,D2            *днаюбкъел й ьюпс б 2 пюгю анкэье
    SUB.W #16,D0            *днаюбкъел й пеилс б 2 пюгю анкэье                            
    CMP.W D0,D2             *япюбмхбюел мюундхряъ кх ьюп якебю нр пеилс
    BLT .BALLNEXT           *еякх дю рн напюаюршбюел ьюп дюкэье
    MOVE.L #$18040003,VDPCONTROL    *гюпюмее цнрнбхляъ й гюанпс дюммшу хг бхденвхою

.BALLREIMUHIT               *пеюйжхъ мю йюяюмхе ьюпю на пеилс


    MOVE.L #72,D5         *ондз╗л дкъ ондйюрю я мнцх                мюярпнийю ондапняю ьюпю б ондйюре цде рн рср 
    MOVE.L #100,D6        *ондз╗л цнпхгнмрюкэмне сяйнпемхе дкъ ондйюрю я мнцни

    SUB.L #64,A7			*нябнанфдюел леярн б ярейе
    MOVE.B (A7),D0
    ADD.L #64,A7            *бнгбпюыемхе ярейю мю леярн
	CMP.B #13,D0			*япюбмхбюел мнлеп гюыы╗кйс дкъ ондйюрю я мнцни
	BEQ .HIT1
    *MOVE.L #70,D5         *ондз╗л дкъ ондйюрю я яйнкэфемхел
    MOVE.L #35,D6        *ондз╗л цнпхгнмрюкэмне сяйнпемхе дкъ ондйюрю я яйнкэфемхел
   
    CMP.B #0,$FF9FFC	*опнбепйю бглюую цнуеел
    BNE .HIT1

    CMP.B #0,$FF9FFD        *опнбепъел мюундхляъ кх лш б ондйюре
    BNE .HIT1                *еякх мер опносяйюел

    BRA .BALLNEXT           *бнгбпюр й напюанрйе ьюпю

.HIT1
    CMP.B #20,(A3)      *япюбмхбюел сяйнпемхе ондзелю ьюпю
    BGT .BALLNEXT       *еякх сфе еярэ сяйнпемхе ме днаюбкъел

    CLR.L D1            *вхярхл пецхярп дкъ япюбмемхи
    MOVE.W VDPDATA,D0       *явхршбюел дюммше пеилс
    
    
    ROL.W #5,D0             *опнйпсвхбюел ахрш врна ахр онбнпнрю бярюк мю оепбсч онгхжхч

    BTST D1,D0          *реярхпсел мскебни ахр б D0 (щрн пюгбнпнр пеилс)
    MOVE SR,D2          *гюдбхцюел пегскэрюр реярю б D2
    BTST D1,(A5)        *реярхпсел мскебни ахр б A5 (пюгбнпнр лъвю)
    MOVE SR,D3          *гюдбхцюел пегскэрюр реярю б D3

    CMP.B D2,D3         *япюбмхбюел пегскэрюр реярхпнбюмхъ дбсу ахрнб


    *CMP.B (A5),D0           *декюел япюбмемхе мюопюбкемхъ дбхфемхъ лъвю х пелс
    BEQ .NHIT               *еякх мюопюбкемхъ янбоюдючр хд╗л дюкэье
    BCHG #0,(A5)            *еякх мюопюбкемхъ ме янбоюдючр лемъел мюопюбкемхе ьюпю
.NHIT       
    *CMP.B #0,$FF9FFC	*сдюп лъвю цнуеел
    MOVE.B $FF9FFC,D0   *гюдбхцюел бглюу б DO х гю ндмн опнбепъел
    BEQ .NHIT1          *еякх мер бглюую хд╗л дюкэье еякх еярэ хяонкмъел йнд мхфе      24 оХЙ БГЛЮУЮ
    MOVE.B #24,D1       *охй бглюую цнуеел
    CMP.B #30,D0        *япюбмхбюел онкнбхмс бглюую
    BLT .NEGJUMP1       *еякх еы╗ оепбши бглюу ме опнь╗к рн опшцюел дюкэье
    SUB.B #30,D0        *еякх оепбши бглюу опнь╗к нрмхлюел яв╗рвхй врн аш ме осрюрэяъ х наыхе бшвхякемхъ ядекюрэ 
    
.NEGJUMP1
                   
    SUB.B D0,D1         *лш нр онярнъммни 24 блр яопюирю пеилс нрмхлюел деиярбхрекэмне янярнъмхе опъл яеивюя    
    BPL .NEGJUMP        *еякх пегскэрюр онксвхкяъ онкнфхрекэмши рн опшцюел дюкэье
    NEG.B D1            *еякх пегскэрюр нрпхжюрекэмши декюел пебепя мец
    

.NEGJUMP                *бшвхякемхъ опх цнуее
    MOVE.B #80,D0       *гюдбхцюел люйяхлюкэмсч бшянрс сдюпю
    LSL.B #1,D1         *слмнфюел мю 2 гмювемхе пюгмхжш хг .NEGJUM1
   * SUBQ #8,D0         *нрмхлюел бглюу дкъ аюкюмяю
    SUB.B D1,D0         *бшвхрюел хг люйяхлюкэмни бшянрш слмнфеммсч пюгмхжс
  
    MOVE.B D0,D5        *гюдбхцюел бшянрс ондапняю ьюпю
    LSR.B #1,D0         *декхл мю 2 бшянрс ондапняю 
    CLR.W (A1)          *бшярюбкъел блр врн аш нанирх йне йюйхе аюцх
    ADD.B D0,D6         *днаюбкъел цнпхгнмрюкэмне
    
    BRA .NHIT2          *опшфнй дюкэье
    *JMP STOP

.NHIT1
    CLR D0          *нрвхярйю д0 мю бяъйхи яксвюи
    MOVE.B $FF9FFA,D0   *гюцпсгйю хмтнплюжхх н онкнфемхх яюкэрн
    CMP.B #0,D0   *опнбепйю яюкэрн
    
    BEQ .NHIT3         *еякх яеивюя б яюкэрн хяонкмъел йнд мхфе еякх ме б яюкэрн хд╗л дюкэье
    MOVE.L #30,D5         *мювюкэмши ондз╗л дкъ яюкэрн
    MOVE.L #40,D6        *мювюкэмне цнпхгнмрюкэмне сяйнпемхе дкъ яюкэрн

    ADDQ #8,D0      *днаюбкъел еы╗ й онкнфемхч яюкэрн дкъ анкее ярюахкэмнцн пегскэрюрю
    LSR.B #4,D0     *ядбхцюел онякедмхи аюир я ашярпшл гмювемхел

    LSL.B D0,D5     *слмнфюел мюье сяйнпемхе ондз╗лю мю онкнфемхе яюкэрн
    LSL.B D0,D6     *слмнфюел сяйнпемхе цнпхгнмрюкэмне мю онкнфемхе яюкэрн

    CMP.B #0,$FF9FF7    *опнбепйю дбхцюеляъ кх лш бн бпелъ яюкэрн
    BNE .NHIT3          *еякх дбхцюеляъ  хд╗л дюкэье
    *JMP STOP
    CLR.B (A6)          *еякх ярнхл вхярхл яйнпнярэ лъвю
    CLR.L D6            *вхярхл сяйнпемхе юйслскхрхбмне
    *LSL.L #1,D5

    *JMP STOP
    
    *MOVE.B #2,$FF9FF7	*яйнпнярэ дбхфемхъ б яюкэрн
    
    
.NHIT3      

    * MOVE.W #$155,D1         *гюдбхцюел мхфмхи онрнкнй 
    CMP.W #$8,(A1)        *днаюбйю блр еякх лъв кефхр мю онкс
    BGE .NHIT2
    
   * ADD.W #16,(A1)
    *ADDQ #1,D3
    *ADD.W #12,D1
    *MOVE.B #0,(A2)
    
    ADD.W #100,(A1)         *днаюбйю еякх лъв мю онкс днаюбйю й блр
    *ADD.B #50,(A3)
.NHIT2
    *SUB.W (A0),D1           *нрмхлюел онкнфемхе ьюпю нр онкю
    *LSL.W #1,D1             *слмнфюел пегскэрюр 

    *MOVE.B (A3),D0          *гюдбхцюел сяйнпемхе ондзелю
    
    *ADD.W #16,(A1)          *гюдбхцюел мнбсч л╗прбсч рнвйс врна пюгйкхмхрэ лъв еякх нм союк мю онк
    *MOVE.B (A2),D0
    *LSR.B #1,D0
    CLR.B (A2)              *нрвхыюел сяйнпемхе оюдемхъ
    ADD.W #30,(A1)
    *ADD.B #80,(A6)
    *ADD.B D1,D0             *днаюбкъел онкнфемхе ьюпю нрмняхрекэмн онкю й сяйнпемхч оюдемхъ
    ADD.B D5,(A3)          *днаюбйю й сяйнпемхч ондзелю
    ADD.B D6,(A6)         *днаюбйю сяйнпемхъ цнпхгнмрюкэмнцн
   
    
    
    BRA .BALLNEXT
    *BRA STOP   
.ballrotate
                    *ЮДПЕЯЮ ДКЪ DMA FF9FE1 FF9FE2 FF9FE4
    
    *MOVE.L #$FF9FDE,A2      *юдпея дкъ упюмемхъ гюы╗кйх2
    MOVE.L #$FF9FE0,A3      *юдпея дкъ упюмемхъ явервхйю лъвю
    

    MOVEQ #7,D1     *аюкюяр хг йнрнпнцн асдел бшвхрюрэ яйнпнярэ врн аш онксвхрэ ялеыемхе он ахрюл                
    ADDQ.B #1,(A3)   *днаюбкъел й яв╗рвхйс лъвю             
    MOVE.B (A6),D0      *аеп╗л яйнпнярэ ьюпю
    BEQ .BALLRTS    *еякх яйнпнярэ 0 рн опносяйюел напюанрйс бпюыемхъ рел яюлшл лъв ярнхр мю леяре
    LSR.B #5,D0     *декюел декемхъ дкъ хгаюбкемхъ нр лкюдьецн аюирю яйнпнярх лъвю

    SUB.B D0,D1     *бшвхрюел врн аш онксвхрэ ялеыемхе он ахрюл
    BLE .ballnextrotation     *еякх онксвхкяъ мнкэ хкх лхмся FF опшцюел дюкэье
    LSR.B #1,D1     *декхл мю 2 ялеыемхе хмюве хмрепбюк якхьйнл анкэьни
    BEQ .ballnextrotation       *еякх опх ядбхце онксвхкяъ 0 опшцюел дюкэье
    SUBQ.B #1,D1    *бшвхрюел еы╗ 1 врн аш слемэьхрэ хмрепбюк еы╗ 
    *MOVE.B D1,(A3)
.ballnextrotation
    
    BTST D1,(A3)      *япюбмхбюел ялеыемхе он яйнпнярх
    BNE .ballrotatenext     *еякх яв╗рвхй днапюкяъ дн мсфмнцн ахрю хд╗л бпюыюрэ ьюп х яапюяшбюрэ яв╗рвхй
.BALLRTS    
    RTS         *бшопшцхбюел мюгюд аег бпюыемхъ


.ballrotatenext
    CLR.B (A3)      *нрвхярйю яв╗рвхйю лъвю 

    MOVE.L #$FF9FE1,A0      *яв╗рвхй онкнфемхи 8 ахр
    MOVE.L #$FF9FE2,A1      *юдпея лкюдьхи дкъ DMA 16 ахр
    *MOVE.L #$FF9FE4,A2      *юдпея ярюпьхи дкъ DMA 16 ахр
    

    MOVE.B (A0),D0          *гюцпсфюел яв╗рвхй онкнфемхи лъвю
    BTST #0,(A5)            *япюбмхбюел мюопюбкемхе дбхфемхъ
    BNE .1                  *днаюбкъел яв╗рвхй
    BEQ .0                 *слемэьюел яв╗рвхй
.1
    ADD.B #$20,D0      *днаюбкъел й яв╗рвхйс
    
    BRA .2              *опшфнй дюкэье
.0
    SUB.B #$20,D0      *бшвхрюел хг яв╗рвхйю
    
.2
    MOVE.L #$FF9FF2,A2  *юдпея дкъ пюгбнпнрю лъвю б RAM Рюакхже 
    BSET.B #0,$FF9FDF   *сярюмюбкхбюел ткюц дкъ DMA
    MOVE.B D0,(A0)  *гюдбхцюел яв╗рвхй напюрмн б оюлърэ напюгеж яв╗рвхйю 00-20-40-60-80-A0-C0-E0 *FF9FDF ткюц дкъ DMA ьюпю
    BEQ .ballrotatezero     *опнбепйю (еякх онкнфемхе 0 оепеундхл б яоеж леярн)

    BCLR #11,(A2)    *ЯЛЕМЮ ТКЮЦЮ ПЮГБНПНРЮ ЛЪВЮ ОН ЦНПХГНМРЮКХ
    BCLR #12,(A2)    *ЯЛЕМЮ ТКЮЦЮ ПЮГБНПНРЮ ЛЪВЮ ОН ЦНПХГНМРЮКХ
    CLR.L D3            *нрвхыюел D3 врн аш бяе бшвхякемхъ ашкх рнвмшлх я 20
    MOVEQ #1,D4         *дкъ жхйкнрпнмю 
    

    CMP.B #$80,D0           *еякх ьюп опнйпсрхкяъ лемэье вел мю онкнбхмс 
    BLS .ballrotatenextloop    *опшцюел дюкэье
    
    BSET #11,(A2)        *хяйсярбеммн нрпюфюел ьюп он цнпхгнмрюкх х бепрхйюкх
    BSET #12,(A2) 


.ballrotatenextloop
    MOVE.W #$9500,D1    *еякх ме пюбем сярюмюбкхбюел гмювемхъ дкъ длю
    MOVE.W #$96F0,D2 
    ADD.W #$20,D3       *днаюбкъел дкъ якедсчыецн йюдпю япюбмемхъ

    CMP.B D3,D0         *япюбмхбюел яв╗рвхй лъвю
    BEQ .ballrotateend  *еякх пюбем гюйюмвхбюел япюбмемхе
    ADD.W #$80,D1
    ADD.W #$20,D3

    CMP.B D3,D0
    BEQ .ballrotateend
    SUB.W #$80,D1
    ADD.W #$1,D2
    ADD.W #$20,D3

    CMP.B D3,D0
    BEQ .ballrotateend
    ADD.W #$80,D1
    ADD.W #$20,D3
                            *мюдн оепедекюрэ юкцнпхрл бшанпю йюдпю х днаюбхрэ пюгбнпнр
    CMP.B D3,D0
    BEQ .ballrotateend
    
    
    DBRA D4,.ballrotatenextloop     *декюел 2 опнундю
    *CMP.B #4,D7
    *BEQ STOP 
.ballrotateend
    MOVEM.W D1-D2,(A1)        *гюдбхцюел опнлефсрнвмше бшвхякемхъ б оюлърэ дкъ длю (дюммше йнрнпше лнцср х ме онмюднахрэяъ)
    RTS
.ballrotatezero         *яоежхюкэмне бербкемхе дкъ онкнфемхъ ьюпю 0
    MOVE.W #$9580,D1        *гюдбхцюел онякедмее онкнфемхе
    MOVE.W #$96F1,D2

    BSET #11,(A2)        *гепйюкхл ьюп
    BSET #12,(A2)

    BRA .ballrotateend      *оепедю╗л пегскэрюр



BALLDRAW
    MOVE.L #VDPCONTROL,A4
    MOVE.L #$58080003,(A4)      *гюопня бхденвхо мю гюохяэ ьюпю
    MOVE.L #$FF9FDF,A0
       

    MOVE.L #VDPDATA,A2
    MOVE.L #$FF9FEE,A3                  *гюдбхцюел юдпея мювюкю рюакхжш *гюмърш юдпеяю FF9FEE>FF9FF6 онд рюакхжс яопюирнб

    MOVE.L (A3)+,(A2)                   *аеп╗л гмювемхе Y
    MOVE.L (A3),(A2)                   *гюдбхцюел юдпея пюгбнпнрю х кхмйю
    *MOVE.W VDPCONTROL,D0    *дкъ асдсчыеи опнбепйх ярнкймнбемхъ

    *jmp stop
    
     
    BTST #0,(A0)         *опнбепйю ткюцю длю х опшфнй
    BEQ .RT    
    
    move.w #$8F01,(A4)  *юбрнякнфемхе 1
    move.w #$937E,(A4)
    move.w #$9400,(A4)  *дкхммю
    move.w $FF9FE2,(A4)              *онгхжхъ лъвю вепег йюфдше 9580
    move.w $FF9FE4,(A4)
    move.w #$97C0,(A4)  *хярнвмхй
    move.l #$720000C2,(A4) *бшунд
    MOVE.B #0,(A0)       *нрвхярйю ткюцю длю 
.RT    *jmp stop
    RTS
*LEVEL0==========================================================================================
LEVEL0
    
    *жхйкнрпнм дкъ оепемняю рюиклюою (гюцнрнбкеммнцн бн бпелъ DMA)
    BSR.W MIKUSETUP	*сярюмнбйх яопюирю пелс
	*BSR.B BALLINIT	*гюцпсгвхй ьюпю   фекюрекэмн депфюрэ оюпни (щйнмнлхъ пеяспянб)
    MOVE.L #VRAMTILEMAPB,D6
    JSR LOADTORAMLEVEL0TILEMAP *пюяоюйнбшбюел рюиклюо б RAM
	
	BSR.W DMAWAIT

   
	MOVE.W #$8F02,(VDPCONTROL)
    BSR PREPVRAM    
    MOVE.L #$FFA000,A2 *юдпея рюиклюою б RAM
    MOVE.L #VDPDATA,A3 *юдпея онпрю бхденвхою
    MOVEQ #19,D0 *жхйкнрпнм ярпнвмши
    MOVEQ #29,D1 *жхйкнрпнм йюдпнбши
.L  
    MOVE.L (A2)+,(A3) *рнкйюел 2 рюикю
    DBRA D0,.L      *жхйкхляъ онйю ме бшдюдхл бяч ярпнйс
    ADD.W #128,D6   *днаюбкъел юдпея дн якед ярпнйх
    BSR.W PREPVRAM    *цнрнбхл бхденоюлърэ
    
    MOVEQ #19,D0    *днаюбкъел ярпнвмшу жхйкнб
    
    DBRA D1,.L      *жхйкхляъ онйю ме бшбедел бяе ярпнйх
    
    
    *гюцпсгйю рюикнб
    LEA LEVEL0BTILES,A0 *юдпея рюикнб
    MOVE.L #32,D6 *нрярсо 1 рюик
    JSR PREPVRAM    *цнрнбхл бхденоюлърэ
        
    JSR Nem_Decomp *пюяоюйнбйю опъл б бхденоюлърэ
	
    
    *оюкхрпю + бшунд хг в╗пмнцн    

    MOVE.L #RAM+96,A0 онгхжхъ б RAM дкъ жберю
    LEA LEVEL0BPALITRA,A1
    MOVEQ #7,D7
.PL
    MOVE.L (A1)+,(A0)+ гюцпсгйю оюкхрпш
    DBRA D7,.PL

   

    MOVEQ #0,D7 *нрвхярйю дкъ яв╗рвхйю йюдпнб
    LEA .LOOPJ,A6 
    JMP FADETOPAL
    
    
.GAMELOOP
       
    JSR MIKU    *напюанрйю пеилс
    JSR BALLMATH    *наяв╗р ьюпю
    
    
    
    JSR FRAMECOUNT *ондяв╗р йюдпнб б D7 
    JSR VBLANKSTART
    *JSR DMASPRITETABLE *наяксфхбюмхе рюакхжш яопюирнб
    JSR BALLDRAW  *нрпхянбйю ьюпю
       
   
.LOOPJ                          *рнвйю дкъ опеднрбпюыемхъ бяъйху цкчйнб ян яопюирнл
    JSR Player_ReadControlsDual *явхршбюемхе дфниярхйю б D0 
    *JMP STOP     *рнвйю нярюмнбйх дкъ дфниярхйю
    JSR DMAWAIT
    JSR VBLANKEND
    
         
       
    JMP .GAMELOOP
*DMASPRITETABLE
        *DMA дкъ оепемняю яопюирнбни рюакхжш б бхденоюлърэ 
*    MOVE.L #VDPCONTROL,A0 *оепемня йнмрпнкъ б AO дкъ йнлоюйрмнярх йндю :)
*    MOVE.W #$8F02,(A0)  *сярюмнбйю юбрнякнфемхъ мю 2
    
*    move.w #$9300+(($11F>>1)&$FF),VDPCONTROL мхфмее якнбн дкхммш
*    move.w #$9400+((($0000>>1)&$FF00)>>8),VDPCONTROL бепумее якнбн дкхммш
*    move.w #$9500+(($00>>1)&$FF),VDPCONTROL мхфмхи юдпея хярнвмхйю
*    move.w #$9600+((($D800>>1)&$FF00)>>8),VDPCONTROL япедмхи юдпея хярнвмхйю
*    move.w #$9700+((($FF0000>>1)&$7F0000)>>16),VDPCONTROL бепумхи юдпея хярнвмхйю
    
*    move.l #$40000080+(($D800&$3FFF)<<16)+(($D800&$C000)>>14),VDPCONTROL юдпея мюгмювемхъ+гюосяй DMA
    
    
*    RTS

LEVEL0BTILES INCBIN "tilemap\res\level0btiles.bin"
LEVEL0BTILEMAP INCBIN "tilemap\res\level0btilemap.bin"
LEVEL0BPALITRA INCBIN "tilemap\res\level0bpalitra.bin"
    
MENUWINDOWTILES INCBIN "tilemap\res\menuwindowtile.bin"
MENUWINDOWTILEMAP INCBIN "tilemap\res\menuwindowtilemap.bin"
MENUTEXT INCBIN "tilemap\res\menutext.bin"


*===================================================================================================================
    
RTBLOGOTILES
    INCBIN "tilemap\res\RTBLOGOTILES.BIN"

     
*==============================================================================================================
 
    INCLUDE "MONITOR.X68" *опнцпюллю лнмхрнпю дкъ нркюдйх   
    INCLUDE "SMTP\GEMS.A" *гБСЙНБНИ ДПЮИБЕП+ГЮОВЮЯРХ  
  

   
    

*=========================================================================================================
 

    



*================================================================================================
    





    END    START        ; last line of source












    
    
    
    


    
    
    
























































































































































*~Font name~Courier New~
*~Font size~10~
*~Tab type~1~
*~Tab size~4~
